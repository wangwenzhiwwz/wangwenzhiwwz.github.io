<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一键安装Hysteria 2 Hysteria协议大家可能在很多地方都见过，很多人都说是可以拯救吃灰小鸡的脚本。但是由于他使用的udp协议，并且比较暴力。</title>
      <link href="/article/2024-08-08_Hysteria2/"/>
      <url>/article/2024-08-08_Hysteria2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/Hysteria2.png"></p><aside>💡 **一键安装Hysteria 2** | WWZ.iM</aside><h1 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h1><pre><code class="hljs bash">wget -N --no-check-certificate https://raw.githubusercontent.com/Misaka-blog/hysteria-install/main/hy2/hysteria.sh &amp;&amp; bash hysteria.sh</code></pre><h1 id="重新运行"><a href="#重新运行" class="headerlink" title="重新运行"></a>重新运行</h1><pre><code class="hljs bash">bash hysteria.sh</code></pre><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a><strong>1.前言</strong></h1><p>Hysteria协议大家可能在很多地方都见过，很多人都说是可以拯救吃灰小鸡的脚本。但是由于他使用的udp协议，并且比较暴力。</p><h1 id="导入软件"><a href="#导入软件" class="headerlink" title="导入软件"></a><strong>导入软件</strong></h1><h3 id="windows的Nekoray-安卓的Nekobox"><a href="#windows的Nekoray-安卓的Nekobox" class="headerlink" title="windows的Nekoray &#x2F; 安卓的Nekobox"></a><strong>windows的Nekoray &#x2F; 安卓的Nekobox</strong></h3><p>新版的nekoray和nekobox可以直接导入节点链接，并且使用sing-box进行代理。</p><p>首先复制你的节点链接，比如我搭建好的链接就是</p><p><code>hysteria2://081e248c@71.48.11.19:9368/?insecure=1&amp;sni=www.bing.com#Misaka-Hysteria2</code></p><p>在nekoray界面点击<code>程序</code>然后点击<code>从剪切板导入</code>即可。</p><p>!<a href="https://tc.duangks.com/img/202311302134703.webp">https://tc.duangks.com/img/202311302134703.webp</a></p><h1 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a><strong>4.常见问题</strong></h1><h3 id="Hysteria-是多倍发包吗？"><a href="#Hysteria-是多倍发包吗？" class="headerlink" title="Hysteria 是多倍发包吗？"></a><strong>Hysteria 是多倍发包吗？</strong></h3><p><strong>不是。Hysteria 不会在任何情况下主动对一份数据进行多次发送</strong> ，只有在检测到丢包时才会对丢失的部分进行重传（丢包重传是任何可靠协议都必须有的）。而检测丢包和重传的策略和原版 QUIC 完全一致，QUIC 的策略本身也源自 TCP 没有太大区别。</p><p>在丢包率低的情况下，Hysteria 传输一份数据所消耗的流量和数据本身大小没有太大差异，并且能跑满带宽。假如是多倍发包，即使只多一倍，流量消耗也会是原来的两倍，并且最大有效传输速度只是线路的一半。因此所谓多倍发包是一个非常容易证伪的错误说法。</p><p><a href="https://duangks.com/archives/155/">一键脚本安装新版Hysteria 2，不需要域名，垃圾小鸡直接起飞 - 性价比机场测速</a></p><p><strong>Hysteria2一键安装教程，搭建歇斯底里2（windows,安卓,ios,mac）客户端下载，sing-box配置使用教程</strong></p><p>Hysteria2一键安装视频教程：▶ <a href="https://youtu.be/N6j3gWde8cQ">https://youtu.be/N6j3gWde8cQ</a></p><p><strong>步骤：</strong></p><p><strong>一、准备一个VPS服务器（Debian）</strong></p><p>Vultr注册账号：<a href="https://www.vultr.com/?ref=8941832-8H">https://www.vultr.com/?ref=8941832-8H</a></p><p><strong>二、下载搭建工具 FinalShell</strong></p><p>FinalShell下载：<a href="https://kjfx.lanzoui.com/iqm6Uosbzha">点击下载&gt;&gt;</a></p><p>备用下载（Windows MacOS Linux）：<a href="http://www.hostbuf.com/t/988.html">点击下载&gt;&gt;</a></p><p><strong>三、更新 VPS 系统，安装组件</strong></p><pre><code class="hljs plaintext">apt update -yapt install curl sudo -y</code></pre><p><strong>四、Hysteria 2 一键安装脚本</strong></p><pre><code class="hljs plaintext">wget -N --no-check-certificate https://raw.githubusercontent.com/flame1ce/hysteria2-install/main/hysteria2-install-main/hy2/hysteria.sh &amp;&amp; bash hysteria.sh</code></pre><p><strong>五、Hysteria 服务相关命令</strong></p><pre><code class="hljs plaintext">systemctl start hysteria-server.service    # 启动 hysteria 服务systemctl enable hysteria-server.service   # 设置 hysteria 服务 开机自启systemctl restart hysteria-server.service  # 重启 hysteria 服务systemctl stop hysteria-server.service     # 停止 hysteria 服务systemctl status hysteria-server.service   # 查看 hysteria 服务 状态</code></pre><p><strong>六、客户端配置</strong></p><ul><li><p>Windows 建议使用 V2rayN，<a href="https://github.com/2dust/v2rayN/releases/latest">点击下载&gt;&gt;</a></p><p>  如果你不清楚下载哪个文件，请下载 “zz_v2rayN-With-Core-SelfContained.7z” 解压使用。</p></li><li><p>IOS&#x2F;MAC 建议使用 sing-box 或 Shadowrocket</p><p>  需要使用美区 AppleID 登录 App Store 下载，如果没有美区ID，可以点击免费申请一个 <a href="https://github.com/kjfx/AppleID">美区AppleID&gt;&gt;</a></p></li><li><p>安卓手机 建议使用 sing-box</p><p>  可以在 Google Play 商店下载，或者<a href="https://github.com/SagerNet/sing-box/releases/latest">官方下载&gt;&gt;</a></p><p>  请下载.apk文件，建议下载v8a.apk</p></li></ul><p><strong>七、sing-box 配置文件</strong></p><pre><code class="hljs plaintext">&#123;  &quot;dns&quot;: &#123;    &quot;servers&quot;: [      &#123;        &quot;tag&quot;: &quot;cf&quot;,        &quot;address&quot;: &quot;https://1.1.1.1/dns-query&quot;      &#125;,      &#123;        &quot;tag&quot;: &quot;local&quot;,        &quot;address&quot;: &quot;223.5.5.5&quot;,        &quot;detour&quot;: &quot;direct&quot;      &#125;,      &#123;        &quot;tag&quot;: &quot;block&quot;,        &quot;address&quot;: &quot;rcode://success&quot;      &#125;    ],    &quot;rules&quot;: [      &#123;        &quot;geosite&quot;: &quot;category-ads-all&quot;,        &quot;server&quot;: &quot;block&quot;,        &quot;disable_cache&quot;: true      &#125;,      &#123;        &quot;outbound&quot;: &quot;any&quot;,        &quot;server&quot;: &quot;local&quot;      &#125;,      &#123;        &quot;geosite&quot;: &quot;cn&quot;,        &quot;server&quot;: &quot;local&quot;      &#125;    ],    &quot;strategy&quot;: &quot;ipv4_only&quot;  &#125;,  &quot;inbounds&quot;: [    &#123;      &quot;type&quot;: &quot;tun&quot;,      &quot;inet4_address&quot;: &quot;172.19.0.1/30&quot;,      &quot;auto_route&quot;: true,      &quot;strict_route&quot;: false,      &quot;sniff&quot;: true    &#125;  ],  &quot;outbounds&quot;: [    &#123;      &quot;type&quot;: &quot;hysteria2&quot;,      &quot;tag&quot;: &quot;proxy&quot;,      &quot;server&quot;: &quot;IP&quot;,             // VPS ip      &quot;server_port&quot;: 443,         // 端口      &quot;up_mbps&quot;: 20,              //上传速率，实际填写，过大会导致流量浪费      &quot;down_mbps&quot;: 100,           //下载速率，实际填写，过大会导致流量浪费      &quot;password&quot;: &quot;88888888&quot;,   //hysteria2 服务密码      &quot;tls&quot;: &#123;        &quot;enabled&quot;: true,        &quot;server_name&quot;: &quot;www.bing.com&quot;,        &quot;insecure&quot;: true      &#125;    &#125;,    &#123;      &quot;type&quot;: &quot;direct&quot;,      &quot;tag&quot;: &quot;direct&quot;    &#125;,    &#123;      &quot;type&quot;: &quot;block&quot;,      &quot;tag&quot;: &quot;block&quot;    &#125;,    &#123;      &quot;type&quot;: &quot;dns&quot;,      &quot;tag&quot;: &quot;dns-out&quot;    &#125;  ],  &quot;route&quot;: &#123;    &quot;rules&quot;: [      &#123;        &quot;protocol&quot;: &quot;dns&quot;,        &quot;outbound&quot;: &quot;dns-out&quot;      &#125;,      &#123;        &quot;geosite&quot;: &quot;cn&quot;,        &quot;geoip&quot;: [          &quot;private&quot;,          &quot;cn&quot;        ],        &quot;outbound&quot;: &quot;direct&quot;      &#125;,      &#123;        &quot;geosite&quot;: &quot;category-ads-all&quot;,        &quot;outbound&quot;: &quot;block&quot;      &#125;    ],    &quot;auto_detect_interface&quot;: true  &#125;&#125;</code></pre><p><strong>八、常见问题</strong></p><p>节点如果不能正常使用，请放行端口，请将以下命令复制到搭建工具，再点回车</p><pre><code class="hljs plaintext">iptables -I INPUT -p tcp --dport 443 -j ACCEPT</code></pre><ul><li>请将 443 改为你节点的端口再使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 一键脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hiddify VPN 客户端 VPN代理软件，不同平台设备下的科学上网代理软件，根据使用平台及使用场景来选择适合的客户端。</title>
      <link href="/article/2024-08-07_VPN/"/>
      <url>/article/2024-08-07_VPN/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/VPN.png"></p><p>💡 <strong>Hiddify</strong> 全平台VPN客户端 | WWZ.iM</p><h1 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a><a href="https://alist.wwz.im/VPN">直接下载</a></h1><p><a href="https://alist.wwz.im/VPN">AList.WWZ.iM</a></p><table><thead><tr><th>客户端</th><th>Clash订阅（默认）</th><th>SingBox订阅</th><th>V2Ray订阅</th></tr></thead><tbody><tr><td>Android</td><td><a href="https://alist.wwz.im/VPN/Hiddify/Hiddify-Android-universal.apk">https://alist.wwz.im/VPN/Hiddify/Hiddify-Android-universal.apk</a></td><td><a href="https://www.wwz.im/article/Sing-Box">https://www.wwz.im/article/Sing-Box</a></td><td><a href="https://alist.wwz.im/VPN/V2rayNG">https://alist.wwz.im/VPN/V2rayNG</a></td></tr><tr><td>Windows</td><td><a href="https://alist.wwz.im/VPN/Hiddify/Hiddify-Windows-Portable-x64.zip">https://alist.wwz.im/VPN/Hiddify/Hiddify-Windows-Portable-x64.zip</a></td><td><a href="https://alist.wwz.im/VPN/V2rayN">https://alist.wwz.im/VPN/V2rayN</a></td><td><a href="https://alist.wwz.im/VPN/V2rayN">https://alist.wwz.im/VPN/V2rayN</a></td></tr><tr><td>iOS</td><td><a href="https://testflight.apple.com/join/URrT6ZWm">https://testflight.apple.com/join/URrT6ZWm</a></td><td><a href="https://www.wwz.im/article/Sing-Box">https://www.wwz.im/article/Sing-Box</a></td><td><a href="https://apps.apple.com/us/app/shadowrocket/id932747118">https://apps.apple.com/us/app/shadowrocket/id932747118</a></td></tr><tr><td>MacOS</td><td><a href="https://alist.wwz.im/VPN/Hiddify/Hiddify-MacOS.dmg">https://alist.wwz.im/VPN/Hiddify/Hiddify-MacOS.dmg</a></td><td></td><td></td></tr></tbody></table><p><a href="https://github.com/hiddify/hiddify-next/releases">https://github.com/hiddify/hiddify-next/releases</a></p><p><a href="https://translate.yandex.com/translate">Yandex</a></p><p><a href="https://translate.yandex.com/translate">https://translate.yandex.com/translate</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>目前，各种科学上网协议不断增多，客户端软件也是越来越多。</p><p>确定你所使用的订阅类型选择合适的客户端软件，默认使用V2Ray订阅</p><p>最新选择Hiddify导入Clash订阅使用更方便</p><p><a href="https://www.youtube.com/watch?v=boAFTSxDTTs&t=5s">https://www.youtube.com/watch?v=boAFTSxDTTs&amp;t=5s</a></p><h1 id="Hiddify-App-是什么？"><a href="#Hiddify-App-是什么？" class="headerlink" title="Hiddify App 是什么？"></a><strong>Hiddify App 是什么？</strong></h1><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/8de6dcdf-172b-4660-80ec-06dcd4abe7e5/f5f08ba6-850f-4a2b-967a-347d8de3d71f/285144404-d821cfe0-b4c4-441f-be4e-eb9209f59542.png" alt="285144404-d821cfe0-b4c4-441f-be4e-eb9209f59542.png"></p><p>一款基于 <a href="https://github.com/SagerNet/sing-box">Sing-box</a> 通用代理工具的跨平台代理客户端。Hiddify 提供了较全面的代理功能，例如自动选择节点、TUN 模式、使用远程配置文件等。Hiddify 无广告，并且代码开源。它为大家自由访问互联网提供了一个支持多种协议的、安全且私密的工具。</p><p><strong>🚀 主要特性</strong></p><p>✈️ 多平台客户端：Android、iOS、Windows、macOS 和 Linux</p><p>⭐ 简单易用的用户界面</p><p>🔍 基于延迟自动选择节点</p><p>🟡 全面的协议支持：<strong>Vless、Vmess、Reality、TUIC、Wireguard、Hysteria、SSH</strong></p><p>🟡 多种订阅链接和配置文件格式支持： <strong>Sing-box、V2ray、Clash、Clash meta</strong></p><p>🔄 支持自动更新订阅</p><p>🔎 可显示包含了剩余天数和流量使用情况的配置文件信息</p><p>🛡 开源、安全且由社区驱动</p><p>🌙 深色和浅色模式</p><p>⚙ 兼容所有的代理管理面板</p><p>⭐ 适用于伊朗、中国、俄罗斯或其他国家的配置</p><h1 id="免费vpn，操作极其简"><a href="#免费vpn，操作极其简" class="headerlink" title="免费vpn，操作极其简"></a><strong>免费vpn，操作极其简</strong></h1><p>PC端软件下载地址：<a href="https://github.com/NIKJOO/WarpOnWarp-Windows-Client/releases">https://github.com/NIKJOO/WarpOnWarp-Windows-Client/releases</a></p><p>安卓手机端软件下载地址：<a href="https://github.com/bepass-org/oblivion/releases">https://github.com/bepass-org/oblivion/releases</a></p><p><a href="https://one.one.one.one/">1.1.1.1 — The free app that makes your Internet faster.</a></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p><a href="https://binghe.gitbook.io/quan-ping-tai-fan-qiang-gong-ju/0/windows">Windows翻墙客户端</a></p><p><a href="https://binghe.gitbook.io/quan-ping-tai-fan-qiang-gong-ju/0/mac">Mac 客户端</a></p><p><a href="https://binghe.gitbook.io/quan-ping-tai-fan-qiang-gong-ju/0/iphone">iPhone 客户端</a></p><h1 id="官方地址直达"><a href="#官方地址直达" class="headerlink" title="官方地址直达"></a>官方地址直达</h1><p><a href="https://nodecats.com/clash-download/">科学上网软件下载</a></p><table><thead><tr><th>推荐工具</th><th>大致介绍</th><th>项目原地址</th><th>软件下载</th></tr></thead><tbody><tr><td>V2rayN</td><td>Windows 客户端。</td><td><a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></td><td><a href="https://pan.wwz.im/s/d8qLgXoXoqw59Cw">https://pan.wwz.im/s/d8qLgXoXoqw59Cw</a></td></tr><tr><td>Shadowrocket</td><td>iOS VPN 应用</td><td><a href="https://youtu.be/0hphAq3_yL8">https://youtu.be/0hphAq3_yL8</a></td><td><a href="https://apps.apple.com/us/app/shadowrocket/id932747118">https://apps.apple.com/us/app/shadowrocket/id932747118</a></td></tr><tr><td>V2rayNG</td><td>Android客户端</td><td><a href="https://github.com/2dust/v2rayNG/releases">https://github.com/2dust/v2rayNG/releases</a></td><td><a href="https://pan.wwz.im/s/PFK75g8GRMAF4Gx">https://pan.wwz.im/s/PFK75g8GRMAF4Gx</a></td></tr></tbody></table><p><a href="https://github.com/2dust/clashN/releases">https://github.com/2dust/clashN/releases</a></p><p><a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu DD是一个Unix和类Unix系统上的命令，主要功能为转换和复制文件。甚至可以将远端系统镜像，比如Windows系统镜像写入硬盘进行安装</title>
      <link href="/article/2024-08-01_Linux/"/>
      <url>/article/2024-08-01_Linux/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/ubuntu.png"></p><h2 id="综合工具箱（强烈推荐）"><a href="#综合工具箱（强烈推荐）" class="headerlink" title="综合工具箱（强烈推荐）"></a><code>综合工具箱（强烈推荐）</code></h2><pre><code class="hljs bash">curl -sS -O https://kejilion.pro/kejilion.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x kejilion.sh &amp;&amp; ./kejilion.sh</code></pre><p>!<a href="https://wangwenzhi.eu.org/images/images/ubuntu.png">https://wangwenzhi.eu.org/images/images/ubuntu.png</a></p><p>专为Linux服务器监控、测试和管理而设计。整合了各类系统工具面板的安装及使用，使系统维护变得更加简单。</p><h3 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装curl</h3><p><strong>Debian&#x2F;Ubuntu</strong></p><p><code>apt update -y  &amp;&amp; apt install -y curl</code></p><p><strong>CentOS</strong></p><p><code>yum update &amp;&amp; yum install -y curl</code></p><p><strong>Alpine Linux</strong></p><p><code>apk update &amp;&amp; apk add curl</code></p><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h3><p>官网版</p><p><code>curl -sS -O https://kejilion.pro/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</code></p><p>GitHub版 部分小伙伴会遇到官网版出现大段乱码！就用GitHub版本吧！</p><p><code>curl -sS -O https://raw.githubusercontent.com/kejilion/sh/main/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</code></p><p>国内服务器版</p><p><code>curl -sS -O https://raw.gitmirror.com/kejilion/sh/main/cn/kejilion.sh &amp;&amp; chmod +x kejilion.sh &amp;&amp; ./kejilion.sh</code></p><h2 id="更新软件包列表，然后安装-curl-软件包"><a href="#更新软件包列表，然后安装-curl-软件包" class="headerlink" title="更新软件包列表，然后安装**curl**软件包"></a>更新软件包列表，然后安装**<code>curl</code>**软件包</h2><p><strong>Debian&#x2F;Ubuntu</strong>安装下载工具</p><pre><code class="hljs bash">apt update -y  &amp;&amp; apt install -y curl</code></pre><p><strong>CentOS</strong>安装下载工具</p><pre><code class="hljs bash">yum update &amp;&amp; yum install curl</code></pre><p><strong>Alpine Linux</strong></p><pre><code class="hljs bash">apt-get updateapt-get install <span class="hljs-built_in">sudo</span></code></pre><h1 id="dd系统，一劳永逸。目前支持amd和arm的脚本："><a href="#dd系统，一劳永逸。目前支持amd和arm的脚本：" class="headerlink" title="dd系统，一劳永逸。目前支持amd和arm的脚本："></a>dd系统，一劳永逸。目前支持amd和arm的脚本：</h1><p><code>bash &lt;(wget --no-check-certificate -qO- &#39;https://moeclub.org/attachment/LinuxShell/InstallNET.sh&#39;) -u 20.04 -v 64 -a -firmware -p password</code></p><h2 id="DD是什么？"><a href="#DD是什么？" class="headerlink" title="DD是什么？"></a>DD是什么？</h2><p>维基百科是这样定义的，DD是一个Unix和类Unix系统上的命令，主要功能为转换和复制文件。甚至可以将远端系统镜像，比如Windows系统镜像写入硬盘进行安装。</p><p>DD系统是什么？一键DD系统角本是啥？</p><p>DD系统，就是通过网络重装系统，而不是传统的通过u盘或者是控制面板重装系统。而一键DD系统角本就是，通过自动化脚本执行所有的dd步骤，你只需要执行一行命令即可dd完成，方便快捷。</p><h2 id="为什么要DD系统？"><a href="#为什么要DD系统？" class="headerlink" title="为什么要DD系统？"></a>为什么要DD系统？</h2><p>主要原因有以下两点：</p><p>1、很多时候我们的vps提供商给到我们的可能是定制版系统，又或者没有提供我们想要的系统和功能。通过网络重装（dd）的方式可自由为服务器切换其它系统。</p><p>2、有些vps服务商还会限制重装系统的次数，通过dd系统就可以绕过。</p><h2 id="其他版本"><a href="#其他版本" class="headerlink" title="其他版本"></a>其他版本</h2><p><code>bash &lt;(wget --no-check-certificate -qO- &#39;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#39;) -d 9 -v 64 -p 密码</code><br>命令中的 -d 后面为Debian版本号，-v 后面为64位&#x2F;32位，【7、8、9、10】<br>命令中的 -u 后面为Ubuntu版本号，-v 后面为64位&#x2F;32位，【14.04、16.04、18.04、20.04】<br><code>bash &lt;(wget --no-check-certificate -qO- &#39;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#39;) -d 9 -v 64 -p password</code></p><h1 id="要为您的-Ubuntu-版本安装所有可用更新，您可以在终端中使用以下命令："><a href="#要为您的-Ubuntu-版本安装所有可用更新，您可以在终端中使用以下命令：" class="headerlink" title="要为您的 Ubuntu 版本安装所有可用更新，您可以在终端中使用以下命令："></a>要为您的 Ubuntu 版本安装所有可用更新，您可以在终端中使用以下命令：</h1><pre><code class="hljs plaintext">sudo apt update &amp;&amp; sudo apt upgrade</code></pre><p>此命令将更新软件包列表并将所有已安装的软件包升级到最新版本。建议在升级 Ubuntu 版本之前运行此命令，以确保您的系统是最新的，并避免在升级过程中出现任何潜在问题。</p><p>请注意，升级到新版本的 Ubuntu 是系统的重大更改，因此在继续之前备份重要数据非常重要。您可以使用以下命令升级 Ubuntu 版本：</p><pre><code class="hljs plaintext">sudo do-release-upgrade</code></pre><p>此命令将检查是否有新的 Ubuntu 版本，并提示您升级（如果有）。请确保在升级过程中仔细按照说明进行操作。</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenAI ChatGPT 是一家人工智能技术公司，由多位顶尖科学家和企业家创立，其业务覆盖人工智能基础研究、产品研发、技术咨询和服务等领域</title>
      <link href="/article/2024-7-27_AI/"/>
      <url>/article/2024-7-27_AI/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/chatgpt.png"></p><h1 id="OpenAI-被曝早在-2021-年斥资数千万（1100-万）美元买下-AI-com-域名，并在近期启用"><a href="#OpenAI-被曝早在-2021-年斥资数千万（1100-万）美元买下-AI-com-域名，并在近期启用" class="headerlink" title="OpenAI 被曝早在 2021 年斥资数千万（1100 万）美元买下 AI.com 域名，并在近期启用"></a>OpenAI 被曝早在 2021 年斥资数千万（1100 万）美元买下 AI.com 域名，并在近期启用</h1><hr><h3 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a><a href="https://ai.com/">ChatGPT</a></h3><hr><p>据最新消息，人工智能领域的领先企业 OpenAI 已经斥资数千万美元（1100 万美元）购买了域名 AI.com。近日，该公司正式启用了这一域名，进一步巩固了其在人工智能领域的领导地位。</p><p>据悉，OpenAI 的这一举措旨在提高其品牌的知名度和可信度，并更好地向全球范围内的客户和利益相关者展示其创新技术和解决方案。同时，AI.com 这一短小精悍的域名也有望为 OpenAI 带来更多的流量和搜索排名，进一步增强其在线存在感和竞争力。</p><p>OpenAI 是一家人工智能技术公司，由多位顶尖科学家和企业家创立，其业务覆盖人工智能基础研究、产品研发、技术咨询和服务等领域。目前，该公司已经成为人工智能领域的领导者之一，拥有包括硬件、软件和云服务等多种形式的人工智能解决方案，并在众多领域取得了卓越成果，如自然语言处理、计算机视觉、自动驾驶等。</p><p>此次 OpenAI 收购 AI.com 域名的举措，也是该公司加速扩大品牌影响力和拓展全球市场的重要举措之一。可以预见，在未来的发展过程中，OpenAI 还将继续推出更多创新产品和技术，为人工智能领域的发展注入更多的动力和活力。</p>]]></content>
      
      
      <categories>
          
          <category> 热门文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法手册 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多</title>
      <link href="/article/2024-07-27_Markdown%20%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/"/>
      <url>/article/2024-07-27_Markdown%20%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/Markdown.png"></p><h2 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h2><p>代码：</p><pre><code class="hljs bash">*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~</code></pre><p>显示效果：</p><p><em>斜体</em>或_斜体_<br><strong>粗体</strong><br><em><strong>加粗斜体</strong></em><br><del>删除线</del></p><h2 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h2><p>第一种写法：</p><pre><code class="hljs bash">这是一个一级标题============================这是一个二级标题--------------------------------------------------</code></pre><p>第二种写法：</p><pre><code class="hljs bash"><span class="hljs-comment"># 一级标题</span><span class="hljs-comment">## 二级标题</span><span class="hljs-comment">### 三级标题</span><span class="hljs-comment">#### 四级标题</span><span class="hljs-comment">##### 五级标题</span><span class="hljs-comment">###### 六级标题</span></code></pre><p>由于用了[TOC]标记编辑器会把所有标题写到目录大纲中，在这里写的演示标题也会列进去，所以就不演示了。同学们自己在编辑器中观察，很简单，一级标题字号最大，依级递减。</p><h2 id="3-超链接"><a href="#3-超链接" class="headerlink" title="3. 超链接"></a>3. 超链接</h2><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。</p><p> 3.1. 行内式<br>语法说明：</p><p>[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。[链接文字](链接地址 “链接标题”)’这样的形式。链接地址与链接标题前有一个空格。<br>代码：</p><pre><code class="hljs bash">欢迎来到[王文志博客](http://wangwenzhi.top)欢迎来到[王文志博客](http://wangwenzhi.top <span class="hljs-string">&quot;王文志博客&quot;</span>)</code></pre><p>显示效果：</p><p>欢迎来到<a href="http://wangwenzhi.top/">王文志博客</a><br>欢迎来到<a href="http://wangwenzhi.top/" title="王文志博客">王文志博客</a></p><p> 3.2. 参考式<br>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><p>语法说明：<br>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。</p><p>代码：</p><pre><code class="hljs bash">我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3][Leanote 笔记][2]是一个不错的[网站][]。[1]:http://www.google.com <span class="hljs-string">&quot;Google&quot;</span>[2]:http://www.leanote.com <span class="hljs-string">&quot;Leanote&quot;</span>[3]:http://http://blog.leanote.com/freewalk <span class="hljs-string">&quot;梵居闹市&quot;</span>[网站]:http://http://blog.leanote.com/freewalk</code></pre><p>显示效果：</p><p>我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3]<br>[Leanote 笔记][2]是一个不错的[网站][]。<br>[1]:<a href="http://www.google.com/">http://www.google.com</a> “Google”<br>[2]:<a href="http://www.leanote.com/">http://www.leanote.com</a> “Leanote”<br>[3]:<a href="http://http//blog.leanote.com/freewalk">http://http://blog.leanote.com/freewalk</a> “梵居闹市”<br>[网站]:<a href="http://http//blog.leanote.com/freewalk">http://http://blog.leanote.com/freewalk</a></p><p> 3.3. 自动链接</p><p>语法说明：<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><p>代码：</p><pre><code class="hljs bash">&lt;http://example.com/&gt;&lt;address@example.com&gt;</code></pre><p>显示效果：</p><p><a href="http://example.com/">http://example.com/</a><br><a href="mailto:&#97;&#x64;&#100;&#x72;&#101;&#115;&#115;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;">&#97;&#x64;&#100;&#x72;&#101;&#115;&#115;&#x40;&#101;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;</a></p><h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5. 列表"></a>5. 列表</h2><p> 5.1. 无序列表</p><p>代码：</p><pre><code class="hljs bash">- 无序列表项 一- 无序列表项 二- 无序列表项 三</code></pre><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三<br> 5.2. 有序列表</li></ul><p>有序列表则使用数字接着一个英文句点。</p><p>代码：<br> <pre><code class="hljs bash">1. 有序列表项 一2. 有序列表项 二3. 有序列表项 三</code></pre></p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三<br> 5.3. 定义型列表<br>语法说明：</li></ol><p>定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)</p><p>代码：</p><pre><code class="hljs bash">Markdown:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）代码块 2:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）        代码块（左侧有八个不可见的空格）</code></pre><p>显示效果：</p><dl><dt>Markdown<br>:    轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格）<br>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）<br>        代码块（左侧有八个不可见的空格）</dd></dl><p> 5.3. 列表缩进<br>语法说明：</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）：</p><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！<br>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！<br>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。<br>但是如果你懒，那也行： </p><p>代码：</p><pre><code class="hljs bash">*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！ *   那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</code></pre><p> 5.4. 包含段落的列表<br>语法说明：</p><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符（显示效果与代码一致）：</p><p>轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。<br>那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。<br>软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</p><p>那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。<br>寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。<br>但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！</p><p>悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</p><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><p>代码：</p><pre><code class="hljs bash">*   轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！     那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ *    悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。</code></pre><p> 5.5. 包含引用的列表<br>语法说明：</p><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><p>代码：</p><pre><code class="hljs bash">*   阅读的方法:    &gt; 打开书本。    &gt; 打开电灯。</code></pre><p> 5.6. 包含代码区块的引用<br>语法说明：<br>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p><p>一列表项包含一个列表区块：</p><h2 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h2><p>语法说明：</p><p>引用需要在被引用的文本前加上&gt;符号。</p><p>代码：</p><pre><code class="hljs bash">&gt; 这是一个有两段文字的引用,&gt; 无意义的占行文字1.&gt; 无意义的占行文字2.&gt; &gt; 无意义的占行文字3.&gt; 无意义的占行文字4.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><p>代码：</p><pre><code class="hljs bash">&gt; 这是一个有两段文字的引用,无意义的占行文字1.无意义的占行文字2.&gt; 无意义的占行文字3.无意义的占行文字4.</code></pre><p> 6.1. 引用的多层嵌套<br>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><p>代码：</p><pre><code class="hljs bash">&gt;&gt;&gt; 请问 Markdwon 怎么用？ - 小白&gt;&gt; 自己看教程！ - 愤青&gt; 教程在哪？ - 小白</code></pre><p> 6.2. 引用其它要素<br>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><p>代码：</p><pre><code class="hljs bash">&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     <span class="hljs-built_in">return</span> shell_exec(<span class="hljs-string">&quot;echo <span class="hljs-variable">$input</span> | <span class="hljs-variable">$markdown_script</span>&quot;</span>);</code></pre><h2 id="7-插入图像"><a href="#7-插入图像" class="headerlink" title="7. 插入图像"></a>7. 插入图像</h2><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><p> 7.1. 行内式</p><p>代码：</p><pre><code class="hljs bash">美丽花儿： ![美丽花儿](http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg <span class="hljs-string">&quot;美丽花儿&quot;</span>)</code></pre><p>美丽花儿：<br><img src="http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg" alt="美丽花儿" title="美丽花儿"></p><p> 7.2. 参考式</p><p>语法说明：</p><p>在文档的最后写上[标记]:图片地址 “Title”</p><p>代码：</p><pre><code class="hljs bash">美丽花儿：![美丽花儿][flower][flower]:http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg  <span class="hljs-string">&quot;美丽花儿&quot;</span></code></pre><p>美丽花儿：<br>![美丽花儿][flower]<br>[flower]:<a href="http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg">http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg</a>  “美丽花儿”</p><h2 id="8-内容目录"><a href="#8-内容目录" class="headerlink" title="8. 内容目录"></a>8. 内容目录</h2><h2 id="9-注脚"><a href="#9-注脚" class="headerlink" title="9. 注脚"></a>9. 注脚</h2><p>语法说明：</p><p>在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。</p><p>注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。</p><p>代码：</p><pre><code class="hljs bash">使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。[^1]:Markdown是一种纯文本标记语言[^2]:HyperText Markup Language 超文本标记语言[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文</code></pre><p>使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。<br>[^1]:Markdown是一种纯文本标记语言<br>[^2]:HyperText Markup Language 超文本标记语言<br>[^Le]:开源笔记平台，支持Markdown和笔记直接发为博文</p><p>注：脚注自动被搬运到最后面，请到文章末尾查看，并且脚注后方的链接可以直接跳转回到加注的地方。</p><h2 id="10-LaTeX-公式"><a href="#10-LaTeX-公式" class="headerlink" title="10. LaTeX 公式"></a>10. LaTeX 公式</h2><p> 10.1. $ 表示行内公式：</p><p>代码：</p><pre><code class="hljs bash">质能守恒方程可以用一个很简洁的方程式 <span class="hljs-variable">$E</span>=mc^2$ 来表达。</code></pre><p> 10.2 $$ 表示整行公式：<br>代码：</p><pre><code class="hljs bash">$$\sum_&#123;i=1&#125;^n a_i=0$$$<span class="hljs-variable">$f</span>(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$$$\<span class="hljs-built_in">sum</span>^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;$$</code></pre><p>显示效果：</p><p>$$\sum_{i&#x3D;1}^n a_i&#x3D;0$$<br>$$f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 $$<br>$$\sum^{j-1}<em>{k&#x3D;0}{\widehat{\gamma}</em>{kj} z_k}$$</p><h2 id="11-流程图"><a href="#11-流程图" class="headerlink" title="11. 流程图"></a>11. 流程图</h2><p>代码：</p><pre><code class="hljs bash">flowst=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(<span class="hljs-built_in">yes</span>)-&gt;econd(no)-&gt;sub-&gt;io</code></pre><p>flow<br>st&#x3D;&gt;start: Start:&gt;<a href="https://www.zybuluo.com/">https://www.zybuluo.com</a><br>io&#x3D;&gt;inputoutput: verification<br>op&#x3D;&gt;operation: Your Operation<br>cond&#x3D;&gt;condition: Yes or No?<br>sub&#x3D;&gt;subroutine: Your Subroutine<br>e&#x3D;&gt;end<br>st-&gt;io-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;sub-&gt;io</p><h2 id="12-表格"><a href="#12-表格" class="headerlink" title="12 .表格"></a>12 .表格</h2><p>语法说明：</p><p>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。<br>列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。<br>第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。<br>代码：</p><pre><code class="hljs bash">简单方式写表格：学号|姓名|分数-|-|-小明|男|75小红|女|79小陆|男|92原生方式写表格：|学号|姓名|分数||-|-|-||小明|男|75||小红|女|79||小陆|男|92|为表格第二列指定方向：产品|价格-|-:Leanote 高级账号|60元/年Leanote 超级账号|120元/年</code></pre><p>简单方式写表格：</p><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr><tr><td>原生方式写表格：</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>小明</td><td>男</td><td>75</td></tr><tr><td>小红</td><td>女</td><td>79</td></tr><tr><td>小陆</td><td>男</td><td>92</td></tr><tr><td>为表格第二列指定方向：</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>产品</th><th align="right">价格</th></tr></thead><tbody><tr><td>Leanote 高级账号</td><td align="right">60元&#x2F;年</td></tr><tr><td>Leanote 超级账号</td><td align="right">120元&#x2F;年</td></tr></tbody></table><h2 id="14-代码"><a href="#14-代码" class="headerlink" title="14. 代码"></a>14. 代码</h2><p>代码：</p><pre><code class="hljs bash">第一个例子：&lt;div class=<span class="hljs-string">&quot;footer&quot;</span>&gt;   © 2004 Foo Corporation&lt;/div&gt;第二个例子：&lt;table&gt;    &lt;<span class="hljs-built_in">tr</span>&gt;        &lt;th rowspan=<span class="hljs-string">&quot;2&quot;</span>&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;<span class="hljs-built_in">tr</span>&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><p>第一个例子：</p><div class="footer">   © 2004 Foo Corporation</div>第二个例子：<table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github-添加ssh 很多朋友在用github管理项目的时候，都是直接使用https url克隆到本地，当然也有有些人使用 SSH url 克隆到本地。然而，为什么绝大多数人会使用https url克隆呢？</title>
      <link href="/article/2024-07-27_github-%E6%B7%BB%E5%8A%A0ssh/"/>
      <url>/article/2024-07-27_github-%E6%B7%BB%E5%8A%A0ssh/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/github.png"></p><h1 id="github设置添加SSH"><a href="#github设置添加SSH" class="headerlink" title="github设置添加SSH"></a>github设置添加SSH</h1><p>很多朋友在用github管理项目的时候，都是直接使用https url克隆到本地，当然也有有些人使用 SSH url 克隆到本地。然而，为什么绝大多数人会使用https url克隆呢？</p><p>这是因为，使用https url克隆对初学者来说会比较方便，复制https url 然后到 git Bash 里面直接用clone命令克隆到本地就好了。而使用 SSH url 克隆却需要在克隆之前先配置和添加好 SSH key 。</p><p>因此，如果你想要使用 SSH url 克隆的话，你必须是这个项目的拥有者。否则你是无法添加 SSH key 的。</p><h2 id="https-和-SSH-的区别："><a href="#https-和-SSH-的区别：" class="headerlink" title="https 和 SSH 的区别："></a>https 和 SSH 的区别：</h2><p>1、前者可以随意克隆github上的项目，而不管是谁的；而后者则是你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p><p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p><h2 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在 github 上添加 SSH key 的步骤：</h2><p>1、首先需要检查你电脑是否已经有 SSH key<br>运行 git Bash 客户端，输入如下代码：</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ~/.ssh$ <span class="hljs-built_in">ls</span></code></pre><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><p>2、创建一个 SSH key<br>$ ssh-keygen -t rsa -C “<a href="mailto:&#121;&#111;&#117;&#114;&#95;&#x65;&#109;&#97;&#x69;&#108;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#109;">&#121;&#111;&#117;&#114;&#95;&#x65;&#109;&#97;&#x69;&#108;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#111;&#109;</a>“<br>代码参数含义：</p><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p><p>Generating public&#x2F;private rsa key pair.</p><pre><code class="hljs bash"><span class="hljs-comment"># Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span></code></pre><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），</p><p>当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：</p><p>Enter passphrase (empty for no passphrase): </p><pre><code class="hljs bash"><span class="hljs-comment"># Enter same passphrase again:</span></code></pre><p>接下来，就会显示如下代码提示，如：</p><pre><code class="hljs bash">Your identification has been saved <span class="hljs-keyword">in</span> /c/Users/you/.ssh/id_rsa.<span class="hljs-comment"># Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><span class="hljs-comment"># The key fingerprint is:</span><span class="hljs-comment"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span></code></pre><p>当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p><p>3、添加你的 SSH key 到 github上面去<br>a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p><pre><code class="hljs bash">$ clip &lt; ~/.ssh/id_rsa.pub</code></pre><p>b、登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。</p><p>c、点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。</p><p>4、测试一下该SSH key<br>在git Bash 中输入以下代码</p><pre><code class="hljs bash">$ ssh -T git@github.com</code></pre><p>当你输入以上代码时，会有一段警告代码，如：</p><pre><code class="hljs bash">The authenticity of host <span class="hljs-string">&#x27;github.com (207.97.227.239)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><span class="hljs-string"># Are you sure you want to continue connecting (yes/no)?</span></code></pre><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><pre><code class="hljs bash">Enter passphrase <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;/c/Users/Administrator/.ssh/id_rsa&#x27;</span>:</code></pre><p>当然如果你密码输错了，会再要求你输入，知道对了为止。</p><p>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p><p>密码正确后你会看到下面这段话，如：</p><pre><code class="hljs bash">Hi username! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not</span><span class="hljs-string"># provide shell access.</span></code></pre><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><p>如果你有什么疑问或指正，请留言。</p><p>产考文档：<a href="https://help.github.com/articles/generating-ssh-keys">generating-ssh-keys</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客，快速简洁高效，零成本搭建个人博客：Hexo + GitHub Pages + Cloudflare Pages 完整指南</title>
      <link href="/article/2024-7-26_%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/article/2024-7-26_%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>搭建Hexo博客，快速简洁高效，零成本搭建个人博客：Hexo + GitHub Pages + Cloudflare Pages 完整指南<br>本文详细介绍了如何使用Hexo框架搭建一个个人博客，并将其部署到GitHub Pages和Cloudflare Pages上。主要内容包括：</p><p>环境准备：安装Node.js和Git<br>配置Git和GitHub：设置SSH密钥，创建GitHub仓库<br>初始化Hexo项目：安装Hexo，创建新博客<br>部署到GitHub Pages：配置部署设置，推送静态文件<br>部署到Cloudflare Pages：连接GitHub仓库，自动部署<br>基本使用方法：创建新文章，本地预览，发布更新<br>这个教程适合那些想要快速搭建个人博客，但又不想花费太多成本的人。通过使用Hexo、GitHub和Cloudflare的免费服务，您可以轻松创建一个高效、简洁的博客网站。</p><p>1.事前准备<br>域名（非必须，你也可以使用免费域名，或者GitHub.io或Pages.dev分配的域名也可以）<br>GitHub（必须，你需要注册一个GitHub帐号）<br>Cloudflare（非必须，你需要注册一个Cloudflare帐号，这样你就可以将博客部署在CF的CDN里加速，但是你也可以直接使用GitHub.io分配的域名）<br>2.软件支持<br>Node（必须）<br>Git（必须）<br>VSCode（非必须，这是一款轻量型的代码编辑器，可以帮助你养成一个很好的编程习惯）<br>2.1.安装 Node<br>打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a><br>下载后安装，安装的目录可以使用默认目录C:&#x2F;Program Files&#x2F;nodejs&#x2F;<br>安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。<br>2.1.3.安装 Node<br>修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令:<br>npm config set registry <a href="https://mirrors.huaweicloud.com/repository/npm/">https://mirrors.huaweicloud.com/repository/npm/</a><br>2.2.安装 Git<br>进入官网下载适合你当前系统的 Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>2.2.1.安装 Git<br>下载后傻瓜式安装Git即可，安装的目录最好使用默认目录C:&#x2F;Program Files&#x2F;Git<br>点击电脑左下角开始即可看见Git CMD、Git Bash、Git GUI。<br>Git CMD 是windows 命令行的指令风格<br>Git Bash 是linux系统的指令风格（建议使用）<br>Git GUI是图形化界面（新手学习不建议使用）<br>3.配置 Git 密钥并连接至 Github<br>常用 Git 命令</p><p>git config -l  &#x2F;&#x2F;查看所有配置<br>git config –system –list &#x2F;&#x2F;查看系统配置<br>git config –global –list &#x2F;&#x2F;查看用户（全局）配置<br>启动Git</p><p>3.1. 配置用户名和邮箱<br>git config –global user.name “你的用户名”<br>git config –global user.email “你的邮箱”<br>通过git config -l 检查是否配置成功。<br>3.1. 配置用户名和邮箱</p><p>3.2. 配置公钥连接Github<br>执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github<br>ssh-keygen -t rsa -C “你的邮箱”<br>提示Enter file in which to save the key直接一路回车即可，新手小白不推荐设置密钥<br>3.2.1.1<br>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到以下文件<br>id_rsa私钥<br>id_rsa.pub公钥<br>3.2.1.2<br>用记事本打开上述图片中的公钥id_rsa.pub，复制里面的内容，然后开始在github中配置ssh密钥。<br>3.2.1.3<br>将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。<br>3.2.2.1<br>3.2.2.2<br>3.2.2.3<br>3.2.2.4<br>测试连接，输入以下命令<br>ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#111;&#109;">&#x67;&#x69;&#x74;&#64;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#111;&#109;</a><br>第一次连接会提示Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?，输入yes即可<br>3.2.3.1<br>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。<br>3.2.3.2<br>3.3. 创建GitHub.io仓库<br>点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。<br>仓库名字的格式必须为：&lt;用户名&gt;.github.io (注意：前缀必须为用户名，此为预览博客需要，后期可修改仓库名)<br>可见性必须选择 Public 方便第一次部署检查问题，点击 Creat repository 进行创建即可<br>3.3. 创建GitHub.io仓库<br>4.初始化 Hexo 博客<br>创建一个文件夹来保存博客源码（我这里选的路径为D:&#x2F;Hexo-Blog），在文件夹内右键鼠标，选择Open Git Bash here<br>4.1<br>在Git BASH输入如下命令安装 Hexo<br>npm install -g hexo-cli &amp;&amp; hexo -v<br>4.2<br>安装完后输入hexo -v验证是否安装成功。<br>4.3<br>初始化 Hexo 项目安装相关依赖。<br>hexo init blog-demo<br>cd blog-demo<br>npm i<br>4.4<br>初始化项目后，blog-demo有如下结构：<br>4.5<br>node_modules：依赖包<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>.npmignore：发布时忽略的文件（可忽略）<br>_config.landscape.yml：主题的配置文件<br>config.yml：博客的配置文件<br>package.json：项目名称、描述、版本、运行和开发等信<br>输入hexo cl &amp;&amp; hexo s启动项目<br>4.6<br>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。<br>4.7<br>5.将静态博客挂载到 GitHub Pages<br>安装 hexo-deployer-git<br>npm install hexo-deployer-git –save<br>修改 _config.yml 文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。<br>deploy:<br>  type: git<br>  repository: <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#109;">&#103;&#x69;&#116;&#x40;&#x67;&#105;&#x74;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#109;</a>:cmliussss2024&#x2F;cmliussss2024.github.io.git<br>  branch: main<br>修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。<br>&#x2F;&#x2F; Git BASH终端<br>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  </p><p>&#x2F;&#x2F; 或者</p><p>&#x2F;&#x2F; VSCODE终端<br>hexo cl; hexo g; hexo d<br>hexo clean：删除之前生成的文件，可以用hexo cl缩写。<br>hexo generate：生成静态文章，可以用hexo g缩写<br>hexo deploy：部署文章，可以用hexo d缩写<br>5.3.1<br>注意：deploy时可能要你输入 username 和 password。<br>如果出现Deploy done，则说明部署成功了。<br>5.3.2<br>稍等两分钟，打开浏览器访问：<a href="https://cmliussss2024.github.io/">https://cmliussss2024.github.io</a> ，这时候我们就可以看到博客内容了。<br>5.3.3</p><p>6.将静态博客挂载到 Cloudflare Pages<br>在 Workers 和 Pages 中选择 Pages 的 连接到 Git<br>6.1.1<br>6.1.2</p><p>然后登录你Blog仓库对应的GitHub帐号<br>6.2.1<br>6.2.2</p><p>点击保存并部署后等待部署完成即可。<br>6.3</p><p>提示成功！您的项目已部署到以下区域：全球后，浏览器访问：<a href="https://cmliussss2024-github-io.pages.dev/">https://cmliussss2024-github-io.pages.dev</a> ，这时候我们就可以看到博客内容了。<br>6.4<br>这时你也就可以将你的&lt;用户名&gt;.github.io的仓库设置为Private私库了</p><p>如果你有自己的域名，你可以在这里绑定你自己的自定义域，即可<br>6.5</p><p>如何使用<br>新建一篇博文<br>hexo new 这是一篇新的博文<br>然后用文本编辑器去编辑_posts&#x2F;这是一篇新的博文.md里的内容即可，注意要使用Markdown格式书写。<br>详细使用方法可以查阅 <a href="https://hexo.io/zh-cn/docs/writing">https://hexo.io/zh-cn/docs/writing</a></p><p>编辑完文章保存后可以使用如下命令，生成本地页面 <a href="http://localhost:4000/">http://localhost:4000/</a> ，进行预览<br>&#x2F;&#x2F; Git BASH终端<br>hexo cl &amp;&amp; hexo s</p><p>&#x2F;&#x2F; 或者</p><p>&#x2F;&#x2F; VSCODE终端<br>hexo cl; hexo s<br>确认无误后使用以下命令，将本地文章推送至GitHub仓库即可<br>&#x2F;&#x2F; Git BASH终端<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</p><p>&#x2F;&#x2F; 或者</p><p>&#x2F;&#x2F; VSCODE终端<br>hexo cl; hexo g; hexo d<br>下一期会讲讲进阶的使用方法，主题美化</p><p>VSCODE 终端首次执行报错<br>使用管理员身份打开 powershell ,输入以下命令</p><p>Set-ExecutionPolicy RemoteSigned<br>参考资料<br><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a><br><a href="https://www.fomal.cc/posts/e593433d.html">https://www.fomal.cc/posts/e593433d.html</a><br><a href="https://docs.anheyu.com/">https://docs.anheyu.com/</a></p><p>致谢项目<br><a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> 必看精选 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLog </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WWZ.iM The new domain name is the abbreviation of wangwenzhi, im means my own, and the combination is wangwenzhi myself, even if wwz.im</title>
      <link href="/article/2024-07-26_wwz.im/"/>
      <url>/article/2024-07-26_wwz.im/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/wwz.im.png"></p><h1 id="https-www-wwz-im"><a href="#https-www-wwz-im" class="headerlink" title="https://www.wwz.im/"></a><a href="https://www.wwz.im/">https://www.wwz.im/</a></h1><h1 id="wwz-im"><a href="#wwz-im" class="headerlink" title="wwz.im"></a><a href="https://www.wwz.im/">wwz.im</a></h1><h2 id="wangwenzhi-is-new-domain-name-wwz-im"><a href="#wangwenzhi-is-new-domain-name-wwz-im" class="headerlink" title="wangwenzhi is new domain name wwz.im"></a>wangwenzhi is new domain name wwz.im</h2><p>The new domain name is the abbreviation of wangwenzhi, im means my own, and the combination is wangwenzhi myself, even if wwz.im</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS[CentOS]中安装 ZeroTier</title>
      <link href="/article/2024-7-22_ZeroTier/"/>
      <url>/article/2024-7-22_ZeroTier/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/ZeroTier.png"></p><ol><li><p>使用以下命令下载 ZeroTier 安装脚本：</p> <pre><code class="hljs plaintext">curl -s https://install.zerotier.com | bash</code></pre></li><li><p>安装完成后，使用以下命令启动 ZeroTier 服务：</p> <pre><code class="hljs plaintext">systemctl start zerotier-one</code></pre></li><li><p>可以使用以下命令检查 ZeroTier 服务是否已经启动：</p> <pre><code class="hljs plaintext">systemctl status zerotier-one</code></pre><p> 如果服务已经启动，则可以看到类似以下的输出：</p> <pre><code class="hljs plaintext">● zerotier-one.service - ZeroTier One     Loaded: loaded (/usr/lib/systemd/system/zerotier-one.service; enabled; vendor preset: disabled)     Active: active (running) since Tue 2021-09-28 11:02:14 EDT; 2s ago   Main PID: 16398 (zerotier-one)      Tasks: 14 (limit: 4887)     Memory: 9.7M        CPU: 148ms     CGroup: /system.slice/zerotier-one.service             └─16398 /sbin/zerotier-one</code></pre></li><li><p>如果需要在系统启动时自动启动 ZeroTier 服务，可以使用以下命令将其设置为开机自启：</p> <pre><code class="hljs plaintext">systemctl enable zerotier-one</code></pre></li><li><p>配置完成后，可以在 ZeroTier 官网注册账号并创建网络。在创建网络时，会分配一个网络 ID，将该 ID 添加到 ZeroTier 客户端即可加入该网络。例如：</p> <pre><code class="hljs plaintext">zerotier-cli join 1c33c1ced02dd878</code></pre><p> 其中，**<code>NETWORK_ID</code>** 是从 ZeroTier 网络控制台获取的网络 ID。</p></li></ol><p>希望这些步骤可以帮助你在 CentOS 上安装并使用 ZeroTier。</p><h1 id="ZeroTier-Global-Area-Networking"><a href="#ZeroTier-Global-Area-Networking" class="headerlink" title="ZeroTier | Global Area Networking"></a><a href="https://www.zerotier.com/">ZeroTier | Global Area Networking</a></h1><h1 id="配置一个代理服务"><a href="#配置一个代理服务" class="headerlink" title="配置一个代理服务"></a>配置一个代理服务</h1><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>配置一个代理服务通常包括以下几个步骤：</p><ol><li><p>选择代理服务软件。根据需要选择一个适合的代理服务软件。常见的代理服务软件有 Squid、Nginx、Shadowsocks 等。这里以 Squid 为例。</p></li><li><p>安装代理服务软件。在 Linux 系统中，可以使用包管理工具安装 Squid。例如，在 Ubuntu 系统中，可以使用以下命令安装 Squid：</p> <pre><code class="hljs plaintext">sudo apt-get update</code></pre> <pre><code class="hljs plaintext">sudo apt-get install squid</code></pre><p> 在 Windows 系统中，可以从 Squid 官网下载 Squid for Windows，然后进行安装。</p></li><li><p>修改 Squid 配置文件。在 Linux 系统中，Squid 配置文件通常位于 **<code>/etc/squid/squid.conf</code>**，可以使用文本编辑器打开该文件。在 Windows 系统中，Squid 配置文件通常位于 **<code>squid.conf</code>**，可以使用文本编辑器打开该文件。</p><p> 需要修改的配置项主要包括监听端口、允许访问的网络等。例如，以下是一个简单的配置文件示例：</p> <pre><code class="hljs plaintext">http_port 3128acl localnet src 192.168.0.0/16http_access allow localnet</code></pre><p> 在该配置文件中，**<code>http_port</code>** 指定了 Squid 监听的端口号，**<code>acl localnet</code>** 指定了允许访问的网络，**<code>http_access allow localnet</code>** 指定了允许该网络的流量访问 Squid。</p></li><li><p>启动代理服务。在 Linux 系统中，可以使用以下命令启动 Squid：</p> <pre><code class="hljs plaintext">sudo systemctl start squid</code></pre><p> 在 Windows 系统中，可以在服务管理器中启动 Squid。</p></li><li><p>配置代理客户端。在需要使用代理服务的设备上，配置代理客户端将流量转发到代理服务器。具体配置方法可以参考代理客户端的官方文档或者相关教程。</p><p> 以浏览器为例，可以在浏览器的设置中设置代理服务器地址和端口，将流量通过代理服务器进行访问。</p></li></ol><p>希望这些步骤可以帮助你简单配置一个代理服务。</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的脚本 检测是否可以访问 ChatGPT 脚本 修改检测是否可以访问 ChatGPT 脚本</title>
      <link href="/article/2023-8-10_Script/"/>
      <url>/article/2023-8-10_Script/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/Script.png"></p><h2 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a><strong>更新列表</strong></h2><p>2023-0525 检测是否可以访问 ChatGPT 脚本 <a href="https://github.com/moeakwak/chatgpt-web-share/wiki/%E4%B8%AD%E6%96%87%E6%8C%87%E5%8D%97">来源</a></p><p><strong>PLAINTEXT</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://raw.githubusercontent.com/missuo/OpenAI-Checker/main/openai.sh)</code></pre><hr><p>2023-4-29 修改检测是否可以访问 ChatGPT 脚本</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://ourl.co/oaic)</code></pre><hr><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://cdn.jsdelivr.net/gh/missuo/OpenAI-Checker/openai.sh)</code></pre><hr><h2 id="综合工具箱（强烈推荐，集成了很多脚本）"><a href="#综合工具箱（强烈推荐，集成了很多脚本）" class="headerlink" title="综合工具箱（强烈推荐，集成了很多脚本）"></a><strong>综合工具箱（强烈推荐，集成了很多脚本）</strong></h2><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -O box.sh https://raw.githubusercontent.com/BlueSkyXN/SKY-BOX/main/box.sh &amp;&amp; chmod +x box.sh &amp;&amp; clear &amp;&amp; ./box.sh</code></pre><hr><h2 id="杜甫测试"><a href="#杜甫测试" class="headerlink" title="杜甫测试"></a><strong>杜甫测试</strong></h2><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -q https://github.com/Aniverse/A/raw/i/a &amp;&amp; bash a</code></pre><hr><h2 id="DD-相关"><a href="#DD-相关" class="headerlink" title="DD 相关"></a><strong>DD 相关</strong></h2><h3 id="1、甲骨文-DD-脚本"><a href="#1、甲骨文-DD-脚本" class="headerlink" title="1、甲骨文 DD 脚本"></a><strong>1、甲骨文 DD 脚本</strong></h3><p>DD 成 Debian 10</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -d 10 -v 64 -p &quot;自定义root密码&quot; -port &quot;自定义ssh端口&quot;</code></pre><hr><p>DD 成 Ubuntu 20.04</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -u 20.04 -v 64 -p &quot;自定义root密码&quot; -port &quot;自定义ssh端口&quot;</code></pre><hr><h3 id="2、MoeClub-脚本"><a href="#2、MoeClub-脚本" class="headerlink" title="2、MoeClub 脚本"></a><strong>2、MoeClub 脚本</strong></h3><p><strong>重点推荐</strong>：</p><p>时间：22&#x2F;11&#x2F;2021 15:21 萌咖更新脚本：</p><ol><li><p>新增对 Oracle AMD，Oracle ARM 全面支持。可支持从 Ubuntu, Oracle Linux 等系统网络重装.</p></li><li><p>更新 dd 镜像的基础系统版本.</p></li><li><p>移除对外部 wget 的依赖.</p></li><li><p>新增 -port 参数，可更改默认 SSH 端口.</p></li><li><p>更新 内置的网络参数计算 逻辑.</p></li><li><p>更新 grub 配置文件定位逻辑，可支持任意引导 grub 的系统.</p></li></ol><p>以下系统已通过测试 (其他自测):</p><p>Debian: 9, 10, 11;</p><p>Ubuntu: 18.04, 20.04;</p><p>CentOS: 6.10;</p><p>以下平台已通过测试 (其他自测):</p><p>Oracle、Do、Azure</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(wget --no-check-certificate -qO- &#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;) -d 10 -v 64 -p &quot;自定义root密码&quot; -port &quot;自定义ssh端口&quot;</code></pre><hr><ul><li>d 10 -v 64</li><li>d 9 -v 64</li><li>u 20.04 -v 64</li><li>u 18.04 -v 64</li></ul><p>开机改密码脚本：</p><p>开机改密：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">#!/bin/bashecho root:Vicer |sudo chpasswd rootsudo sed -i &#x27;s/^#\?PermitRootLogin.*/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config;sudo sed -i &#x27;s/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config;sudo reboot</code></pre><hr><h3 id="3、另一位大佬的脚本"><a href="#3、另一位大佬的脚本" class="headerlink" title="3、另一位大佬的脚本"></a><strong>3、另一位大佬的脚本</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget --no-check-certificate -O AutoReinstall.sh https://git.io/AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh</code></pre><hr><ul><li>CentOS 默认密码 Pwd@CentOS 其它系统 Pwd@Linux</li><li>OpenVZ &#x2F; LXC 架构系统不适用</li></ul><p>来源：<a href="https://blog.hicasper.com/post/135.html">https://blog.hicasper.com/post/135.html</a> 参考：<a href="https://www.ydyno.com/archives/1245.html">https://www.ydyno.com/archives/1245.html</a> 感谢大佬的付出！</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(wget --no-check-certificate -qO- &#x27;https://file.geekn.net/CNODnjau/InstallNET.sh&#x27;) -d 11 -v 64 -a -firmware</code></pre><hr><ul><li>firmware 额外的驱动支持</li><li>d 后面是系统版本号</li><li>v 后面写 64 位 32 位</li><li>a （不清楚这个干啥的但是每个脚本都带）</li></ul><p>–mirror 后面是镜像源地址</p><ul><li>p 后面写自定义密码</li></ul><p><strong>BASH</strong></p><pre><code class="hljs plaintext">镜像站地址官方给出的地址列表：https://www.debian.org/mirror/list一些国内的ftp.cn.debian.orgmirror.bjtu.edu.cnmirror.lzu.edu.cnmirror.nju.edu.cnmirrors.163.commirrors.bfsu.edu.cnmirrors.hit.edu.cnmirrors.huaweicloud.commirror.sjtu.edu.cnmirrors.tuna.tsinghua.edu.cnmirrors.ustc.edu.cn使用方法：（大致都是一样的）清华源--mirror &#x27;https://mirrors.ustc.edu.cn/debian/&#x27;腾讯源--mirror &#x27;https://mirrors.aliyun.com/debian/&#x27;阿里源--mirror &#x27;https://mirrors.aliyun.com/debian/&#x27;华为源--mirror &#x27;https://mirrors.huaweicloud.com/debian/&#x27;</code></pre><hr><h3 id="4、秋水逸冰-Windows-2012-2016-2019-2022-10-11-DD-镜像"><a href="#4、秋水逸冰-Windows-2012-2016-2019-2022-10-11-DD-镜像" class="headerlink" title="4、秋水逸冰 Windows 2012&#x2F;2016&#x2F;2019&#x2F;2022 10&#x2F;11 DD 镜像"></a><strong>4、秋水逸冰 Windows 2012&#x2F;2016&#x2F;2019&#x2F;2022 10&#x2F;11 DD 镜像</strong></h3><p>适用于 UEFI 启动的多个 Windows 系统 DD 镜像：</p><p><a href="https://teddysun.com/656.html">https://teddysun.com/656.html</a></p><p>分别是：</p><ol><li>Windows Server 2012 R2 Datacenter</li><li>Windows Server 2016 Datacenter (build: 14393.5006)</li><li>Windows Server 2019 Datacenter (build: 17763.2686)</li><li>Windows Server 2022 Datacenter (build: 20348.587)</li><li>Windows 10 Enterprise LTSC (build: 19044.1288)</li><li>Windows 11 Pro for Workstations 21H2 (build: 22000.194)</li></ol><p>适用于 BIOS 启动的 Windows Server 2022 Datacenter DD 镜像：</p><p><a href="https://teddysun.com/629.html">https://teddysun.com/629.html</a></p><p>适用于 BIOS 启动的 Windows 11 Pro for Workstations 21H2 DD 镜像：</p><p><a href="https://teddysun.com/642.html">https://teddysun.com/642.html</a></p><p>适用于 BIOS 启动的 Windows 10 Enterprise LTSC DD 镜像：</p><p><a href="https://teddysun.com/640.html">https://teddysun.com/640.html</a></p><p>适用于 BIOS 启动的 Windows Server 2019&#x2F;2016&#x2F;2012R2 Datacenter DD 镜像：</p><p><a href="https://teddysun.com/545.html">https://teddysun.com/545.html</a></p><p>分别是：</p><ol><li>Windows Server 2019 Datacenter（Build: 17763.2686）</li><li>Windows Server 2016 Datacenter（Build: 14393.5006）</li><li>Windows Server 2012 R2 Datacenter</li></ol><h2 id="测试相关"><a href="#测试相关" class="headerlink" title="测试相关"></a><strong>测试相关</strong></h2><h3 id="机器测试"><a href="#机器测试" class="headerlink" title="机器测试"></a><strong>机器测试</strong></h3><h3 id="单线程测试"><a href="#单线程测试" class="headerlink" title="单线程测试"></a><strong>单线程测试</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Lso- https://bench.im/hyperspeed)</code></pre><hr><h3 id="最全测速脚本"><a href="#最全测速脚本" class="headerlink" title="最全测速脚本"></a><strong>最全测速脚本</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast</code></pre><hr><h3 id="superbench"><a href="#superbench" class="headerlink" title="superbench"></a><strong>superbench</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -qO- git.io/superbench.sh | bash</code></pre><hr><h3 id="Bench-sh"><a href="#Bench-sh" class="headerlink" title="Bench.sh"></a><strong>Bench.sh</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -qO- bench.sh | bash</code></pre><hr><h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a><strong>速度测试</strong></h3><h3 id="显示延迟、抖动"><a href="#显示延迟、抖动" class="headerlink" title="显示延迟、抖动"></a><strong>显示延迟、抖动</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(wget -qO- https://bench.im/hyperspeed)</code></pre><hr><h3 id="直接显示回程线路"><a href="#直接显示回程线路" class="headerlink" title="直接显示回程线路"></a><strong>直接显示回程线路</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl https://raw.githubusercontent.com/zhucaidan/mtr_trace/main/mtr_trace.sh|bash</code></pre><hr><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -q route.f2k.pub -O route &amp;&amp; bash route</code></pre><hr><p><strong>PLAINTEXT</strong></p><pre><code class="hljs plaintext"># 第一个wget https://raw.githubusercontent.com/nanqinlang-script/testrace/master/testrace.shbash testrace.sh# 第二个wget -qO- git.io/besttrace | bash</code></pre><hr><h3 id="四网测速"><a href="#四网测速" class="headerlink" title="四网测速"></a><strong>四网测速</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -O jcnf.sh https://raw.githubusercontent.com/Netflixxp/jcnfbesttrace/main/jcnf.shbash jcnf.sh</code></pre><hr><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="三网测速"><a href="#三网测速" class="headerlink" title="三网测速"></a><strong>三网测速</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Lso- https://git.io/superspeed_uxh)</code></pre><hr><p>带快速四网测试版本：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Lso- https://dl.233.mba/d/sh/speedtest.sh)</code></pre><hr><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Lso- https://git.io/J1SEh)</code></pre><hr><p>带综合测试的版本（CPU 信息、Geekbench 等）：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(wget --no-check-certificate -O- https://dl.233.mba/d/sh/superbenchpro.sh)</code></pre><hr><p>来源：<a href="https://www.wrnxr.cn/163.html">https://www.wrnxr.cn/163.html</a></p><h3 id="测试-25-端口是否开放"><a href="#测试-25-端口是否开放" class="headerlink" title="测试 25 端口是否开放"></a><strong>测试 25 端口是否开放</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">telnet smtp.aol.com 25</code></pre><hr><h3 id="测试-IPv4-优先还是-IPv6-优先"><a href="#测试-IPv4-优先还是-IPv6-优先" class="headerlink" title="测试 IPv4 优先还是 IPv6 优先"></a><strong>测试 IPv4 优先还是 IPv6 优先</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl ip.p3terx.com</code></pre><hr><h3 id="流媒体测试"><a href="#流媒体测试" class="headerlink" title="流媒体测试"></a><strong>流媒体测试</strong></h3><h3 id="全媒体测试"><a href="#全媒体测试" class="headerlink" title="全媒体测试"></a><strong>全媒体测试</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -L -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/check.sh)</code></pre><hr><h3 id="奈飞测试"><a href="#奈飞测试" class="headerlink" title="奈飞测试"></a><strong>奈飞测试</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -O nf https://github.com/sjlleo/netflix-verify/releases/download/2.5/nf_2.5_linux_amd64 &amp;&amp; chmod +x nf &amp;&amp; clear &amp;&amp; ./nf</code></pre><hr><p><strong>PLAINTEXT</strong></p><pre><code class="hljs plaintext">#第一个bash &lt;(curl -L -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/check.sh)# 第二个bash &lt;(curl -sSL &quot;https://github.com/CoiaPrant/MediaUnlock_Test/raw/main/check.sh&quot;)</code></pre><hr><h2 id="WARP"><a href="#WARP" class="headerlink" title="WARP"></a><strong>WARP</strong></h2><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -N --no-check-certificate https://cdn.jsdelivr.net/gh/YG-tsj/CFWarp-Pro/multi.sh &amp;&amp; chmod +x multi.sh &amp;&amp; ./multi.sh</code></pre><hr><p>之后进入脚本快捷方式为 <code>bash multi.sh</code></p><h2 id="服务器时间"><a href="#服务器时间" class="headerlink" title="服务器时间"></a><strong>服务器时间</strong></h2><h3 id="CentOS-同步时间"><a href="#CentOS-同步时间" class="headerlink" title="CentOS 同步时间"></a><strong>CentOS 同步时间</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">yum -y install ntpdatetimedatectl set-timezone Asia/Shanghaintpdate ntp1.aliyun.com</code></pre><hr><h2 id="BBR"><a href="#BBR" class="headerlink" title="BBR"></a><strong>BBR</strong></h2><h3 id="CentOS-7-BBR"><a href="#CentOS-7-BBR" class="headerlink" title="CentOS 7 BBR"></a><strong>CentOS 7 BBR</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></pre><hr><h3 id="一键开启-BBR"><a href="#一键开启-BBR" class="headerlink" title="一键开启 BBR"></a><strong>一键开启 BBR</strong></h3><p>注意：需要 Linux Kernel 内核升级到 4.9 及以上版本可以实现 BBR 加速</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">uname -srm</code></pre><hr><p>输出结果：</p><p><strong>PLAINTEXT</strong></p><pre><code class="hljs plaintext">Linux 3.10.0-957.12.2.el7.x86_64 x86_643 - 内核版本.10 - 主修订版本.0-957 - 次要修订版本.12 - 补丁版本.</code></pre><hr><p>一般来说，Ubuntu18.04 以上就可以 (默认的内核 <code>4.15</code>)</p><p><strong>PLAINTEXT</strong></p><pre><code class="hljs plaintext">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.confsysctl -psysctl net.ipv4.tcp_available_congestion_controllsmod | grep bbr</code></pre><hr><h2 id="Docker-相关"><a href="#Docker-相关" class="headerlink" title="Docker 相关"></a><strong>Docker 相关</strong></h2><h3 id="更新、安装必备软件"><a href="#更新、安装必备软件" class="headerlink" title="更新、安装必备软件"></a><strong>更新、安装必备软件</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">apt-get update &amp;&amp; apt-get install -y wget vim</code></pre><hr><h3 id="海外服务器"><a href="#海外服务器" class="headerlink" title="海外服务器"></a><strong>海外服务器</strong></h3><h3 id="非大陆-Docker-安装"><a href="#非大陆-Docker-安装" class="headerlink" title="非大陆 Docker 安装"></a><strong>非大陆 Docker 安装</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -qO- get.docker.com | bash</code></pre><hr><h3 id="卸载-Docker"><a href="#卸载-Docker" class="headerlink" title="卸载 Docker"></a><strong>卸载 Docker</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">sudo apt-get purge docker-ce docker-ce-cli containerd.io</code></pre><hr><p><strong>BASH</strong></p><pre><code class="hljs plaintext">sudo rm -rf /var/lib/dockersudo rm -rf /var/lib/containerd</code></pre><hr><h3 id="非大陆-Docker-compose-安装"><a href="#非大陆-Docker-compose-安装" class="headerlink" title="非大陆 Docker-compose 安装"></a><strong>非大陆 Docker-compose 安装</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><hr><p><strong>BASH</strong></p><pre><code class="hljs plaintext">sudo chmod +x /usr/local/bin/docker-compose</code></pre><hr><p>查看版本</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker-compose --version</code></pre><hr><h3 id="大陆服务器"><a href="#大陆服务器" class="headerlink" title="大陆服务器"></a><strong>大陆服务器</strong></h3><h3 id="国内机安装-docker"><a href="#国内机安装-docker" class="headerlink" title="国内机安装 docker"></a><strong>国内机安装 docker</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl -sSL https://get.daocloud.io/docker | sh</code></pre><hr><h3 id="国内机安装-docker-compose"><a href="#国内机安装-docker-compose" class="headerlink" title="国内机安装 docker-compose"></a><strong>国内机安装 docker-compose</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.1.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><hr><h3 id="卸载-docker"><a href="#卸载-docker" class="headerlink" title="卸载 docker"></a><strong>卸载 docker</strong></h3><p><strong>PLAINTEXT</strong></p><pre><code class="hljs plaintext">sudo apt-get remove docker docker-enginerm -fr /var/lib/docker/</code></pre><hr><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><strong>防火墙</strong></h2><h3 id="CentOS-关闭防火墙"><a href="#CentOS-关闭防火墙" class="headerlink" title="CentOS 关闭防火墙"></a><strong>CentOS 关闭防火墙</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">systemctl start supervisordsystemctl disable firewalldsystemctl stop firewalld</code></pre><hr><h2 id="宝塔相关"><a href="#宝塔相关" class="headerlink" title="宝塔相关"></a><strong>宝塔相关</strong></h2><h3 id="宝塔去除登陆-已经失效，解决方法见：https-blog-laoda-de-archives-bt-to-aapanel"><a href="#宝塔去除登陆-已经失效，解决方法见：https-blog-laoda-de-archives-bt-to-aapanel" class="headerlink" title="宝塔去除登陆 (已经失效，解决方法见：https://blog.laoda.de/archives/bt-to-aapanel)"></a><strong>宝塔去除登陆 (已经失效，解决方法见：<a href="https://blog.laoda.de/archives/bt-to-aapanel">https://blog.laoda.de/archives/bt-to-aapanel</a>)</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">sed -i &quot;s|if (bind_user == &#x27;True&#x27;) &#123;|if (bind_user == &#x27;REMOVED&#x27;) &#123;|g&quot; /www/server/panel/BTPanel/static/js/index.jsrm -rf /www/server/panel/data/bind.pl</code></pre><hr><h3 id="宝塔-aapanel-破解（这个目前也不保证可用了）"><a href="#宝塔-aapanel-破解（这个目前也不保证可用了）" class="headerlink" title="宝塔 &amp; aapanel 破解（这个目前也不保证可用了）"></a><strong>宝塔 &amp; aapanel 破解（这个目前也不保证可用了）</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext"># 宝塔&amp;aapanel破解编辑 /www/server/panel/class/panelplugin.py找到 softList[&#x27;list&#x27;] = tmpList 这行代码在下面添加以下代码，注意缩进softList[&#x27;pro&#x27;] = 1for soft in softList[&#x27;list&#x27;]:soft[&#x27;endtime&#x27;] = 0编辑完毕后保存重启面板即可</code></pre><hr><h2 id="呆梨相关"><a href="#呆梨相关" class="headerlink" title="呆梨相关"></a><strong>呆梨相关</strong></h2><h3 id="XUI"><a href="#XUI" class="headerlink" title="XUI"></a><strong>XUI</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)</code></pre><hr><p>脚本来源：<a href="https://github.com/FranzKafkaYu/x-ui">https://github.com/FranzKafkaYu/x-ui</a></p><h3 id="mack-a"><a href="#mack-a" class="headerlink" title="mack-a"></a><strong>mack-a</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">wget -P /root -N --no-check-certificate &quot;https://raw.githubusercontent.com/mack-a/v2ray-agent/master/install.sh&quot; &amp;&amp; chmod 700 /root/install.sh &amp;&amp; /root/install.sh</code></pre><hr><p>持续更新中</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目前最好用的网盘直链程序 AList</title>
      <link href="/article/2023-8-1_alist/"/>
      <url>/article/2023-8-1_alist/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/alist.png"></p><h2 id="一、项目展示"><a href="#一、项目展示" class="headerlink" title="一、项目展示"></a><strong>一、项目展示</strong></h2><p>GitHub 项目地址：<a href="https://github.com/Xhofe/alist">https://github.com/Xhofe/alist</a></p><p>Demo：<a href="https://alist.nn.ci/">https://alist.nn.ci</a><br>MY Demo：<a href="https://alist.99218632.xyz/">https://alist.99218632.xyz/</a></p><p>Alist 文档地址：<a href="https://alist-doc.nn.ci/en/">https://alist-doc.nn.ci/en/</a></p><h2 id="二、搭建环境"><a href="#二、搭建环境" class="headerlink" title="二、搭建环境"></a><strong>二、搭建环境</strong></h2><ul><li>服务器：腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台（最好是选非大陆的服务器）（<a href="https://loll.cc/tx">购买链接</a>）</li><li>系统：Debian 10（<a href="https://blog.laoda.de/archives/useful-script#dd%E7%9B%B8%E5%85%B3">DD 脚本</a> 非必需 DD 用原来的系统也 OK）</li><li>域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker#5%E5%AE%89%E8%A3%85dockerdocker-compose">相关脚本</a>）</li><li>【非必需二选一】安装好宝塔面板，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需二选一】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>）</li></ul><h2 id="三、搭建视频"><a href="#三、搭建视频" class="headerlink" title="三、搭建视频"></a><strong>三、搭建视频</strong></h2><p>YouTube：<a href="https://youtu.be/6M8QoZoQ-28">https://youtu.be/6M8QoZoQ-28</a></p><p>哔哩哔哩【完整版本可以点击去吐槽到 B 站观看】：</p><h2 id="四、搭建方式"><a href="#四、搭建方式" class="headerlink" title="四、搭建方式"></a><strong>四、搭建方式</strong></h2><p>选择适合自己的搭建方式。</p><h3 id="1、一键脚本安装"><a href="#1、一键脚本安装" class="headerlink" title="1、一键脚本安装"></a><strong>1、一键脚本安装</strong></h3><p>仅支持 Linux-x86_64&#x2F;aarch64 平台。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl -fsSL &quot;https://nn.ci/alist.sh&quot; | bash -s install</code></pre><hr><p><strong>注意：</strong></p><p>已经安装过再次执行安装会删除之前的数据，更新请使用更新命令。</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl -fsSL &quot;https://nn.ci/alist.sh&quot; | bash -s update</code></pre><hr><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a><strong>卸载</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">curl -fsSL &quot;https://nn.ci/alist.sh&quot; | bash -s uninstall</code></pre><hr><h3 id="自定义路径"><a href="#自定义路径" class="headerlink" title="自定义路径"></a><strong>自定义路径</strong></h3><p>默认安装在 <code>/opt/alist</code>，要自定义安装路径，添加安装路径为第二个参数，必须是绝对路径（路径以 alist 结尾时直接安装到给定路径，否则会安装在给定路径 alist 目录下），如安装到 <code>/root</code>：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext"># 安装curl -fsSL &quot;https://nn.ci/alist.sh&quot; | bash -s install /root# 更新curl -fsSL &quot;https://nn.ci/alist.sh&quot; | bash -s update /root# 卸载curl -fsSL &quot;https://nn.ci/alist.sh&quot; | bash -s uninstall /root</code></pre><hr><h3 id="2、手动搭建"><a href="#2、手动搭建" class="headerlink" title="2、手动搭建"></a><strong>2、手动搭建</strong></h3><p>参考文档：<a href="https://alist-doc.nn.ci/docs/install/manual">https://alist-doc.nn.ci/docs/install/manual</a></p><h3 id="3、Docker（本次使用）"><a href="#3、Docker（本次使用）" class="headerlink" title="3、Docker（本次使用）"></a><strong>3、Docker（本次使用）</strong></h3><p>初始密码请查看日志输出：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker logs alist# 或者docker exec -it alist ./alist -password</code></pre><hr><h3 id="稳定版"><a href="#稳定版" class="headerlink" title="稳定版"></a><strong>稳定版</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 --name=&quot;alist&quot; xhofe/alist:latest</code></pre><hr><p>对应的 <code>docker-compose.yml</code></p><p><strong>YAML</strong></p><pre><code class="hljs plaintext">version: &#x27;3.3&#x27;services:    alist:        restart: always        volumes:            - &#x27;/etc/alist:/opt/alist/data&#x27;    # 冒号左边的地址可以自己修改        ports:            - &#x27;5244:5244&#x27;      # 冒号左边的端口可以自己修改        container_name: alist        image: &#x27;xhofe/alist:latest&#x27;</code></pre><hr><h3 id="开发版"><a href="#开发版" class="headerlink" title="开发版"></a><strong>开发版</strong></h3><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 --name=&quot;alist&quot; xhofe/alist:v2</code></pre><hr><h3 id="指定版本"><a href="#指定版本" class="headerlink" title="指定版本"></a><strong>指定版本</strong></h3><p>具体见: <a href="https://hub.docker.com/r/xhofe/alist">https://hub.docker.com/r/xhofe/alist</a></p><p>我们此次使用<strong>稳定版</strong>安装。</p><h3 id="4、其他安装方式"><a href="#4、其他安装方式" class="headerlink" title="4、其他安装方式"></a><strong>4、其他安装方式</strong></h3><p>具体见:<a href="https://alist-doc.nn.ci/docs/intro">https://alist-doc.nn.ci/docs/intro</a></p><h2 id="五、开始搭建（以-Docker-安装为例子）"><a href="#五、开始搭建（以-Docker-安装为例子）" class="headerlink" title="五、开始搭建（以 Docker 安装为例子）"></a><strong>五、开始搭建（以 Docker 安装为例子）</strong></h2><h3 id="1、搭建-Docker-环境"><a href="#1、搭建-Docker-环境" class="headerlink" title="1、搭建 Docker 环境"></a><strong>1、搭建 Docker 环境</strong></h3><p>参考这篇：<a href="https://blog.laoda.de/archives/hello-docker#5%E5%AE%89%E8%A3%85dockerdocker-compose">【Docker 系列】不用宝塔面板，小白一样可以玩转 VPS 服务器！</a></p><h3 id="2、运行安装代码"><a href="#2、运行安装代码" class="headerlink" title="2、运行安装代码"></a><strong>2、运行安装代码</strong></h3><p>视频安装代码：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker run -d --restart=always -v /root/data/docker_data/alist:/opt/alist/data -p 5244:5244 --name=&quot;alist&quot; xhofe/alist:latest  #可以自己保存下来，比如创建一个config.txt的文件，把这条代码复制进去保存，下次换服务器搬家之类的就很容易。</code></pre><hr><p>查看密码：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker logs alist</code></pre><hr><h3 id="3、放行相关端口"><a href="#3、放行相关端口" class="headerlink" title="3、放行相关端口"></a><strong>3、放行相关端口</strong></h3><p>遇到访问不了，请在宝塔面板的防火墙和服务商的后台防火墙里打开对应端口。</p><h3 id="4、配置反向代理"><a href="#4、配置反向代理" class="headerlink" title="4、配置反向代理"></a><strong>4、配置反向代理</strong></h3><p>详情参考视频，注释掉 Nginx 配置文件中的这部分内容：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$&#123;    expires      30d;    error_log /dev/null;    access_log off;&#125;location ~ .*\.(js|css)?$&#123;    expires      12h;    error_log /dev/null;    access_log off;&#125;</code></pre><hr><p>代码如下：</p><p><strong>BASH</strong></p><pre><code class="hljs plaintext">location / &#123;    proxy_pass http://127.0.0.1:5244/;    rewrite ^/(.*)$ /$1 break;    proxy_redirect off;    proxy_set_header Host $host;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header Upgrade-Insecure-Requests 1;    proxy_set_header X-Forwarded-Proto https;&#125;</code></pre><hr><h3 id="5、访问配置账号"><a href="#5、访问配置账号" class="headerlink" title="5、访问配置账号"></a><strong>5、访问配置账号</strong></h3><p>此时，输入反向代理的域名就能正常访问网站了，输入 <code>docker logs alist</code> 里面的密码就能正常登陆后台了。为了方便起见，建议更改一个自己能记住的密码。</p><p>6、添加本地存储</p><p>路径可以填写 <code>/opt/alist/data/</code>，这样的话，就对应 VPS 上的 <code>/root/data/docker_data/alist</code> 这个安装目录了。</p><p>如果你想深一级，可以填写 <code>/opt/alist/data/local</code>，这样的话，你在原来挂载的目录 <code>/root/data/docker_data/alist</code> 下，新建一个 <code>local</code> 的文件夹就可以了，然后你把自己想要展示的文件放在 <code>/root/data/docker_data/alist/local</code> 里即可。</p><p>其他网盘的添加方式，请参考作者的文档：<a href="https://alist-doc.nn.ci/en/">https://alist-doc.nn.ci/en/</a></p><h2 id="六、更新-Alist（适用于-Docker）"><a href="#六、更新-Alist（适用于-Docker）" class="headerlink" title="六、更新 Alist（适用于 Docker）"></a><strong>六、更新 Alist（适用于 Docker）</strong></h2><p><strong>BASH</strong></p><pre><code class="hljs plaintext">docker stop alist  #停止alist容器docker rm -f alist  #删除alist容器，因为之前映射到了本地，所以数据不会被删除cp -r /root/data/docker_data/alist /root/data/docker_data/alist.bak  #可选，如果不放心，可以备份一下数据docker pull xhofe/alist:latest  #拉取最新的alist镜像docker run -d --restart=always -v /root/data/docker_data/alist:/opt/alist/data -p 5244:5244 --name=&quot;alist&quot; xhofe/alist:latest    #运行安装命令，注意-v挂载的路径与原来相同</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用docker搭建苹果CMS网站</title>
      <link href="/article/2023-8-1_AppleCMS/"/>
      <url>/article/2023-8-1_AppleCMS/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/AppleCMS.png"></p><p>~ 演示网站：<a href="https://lijie.gq/">https://lijie.gq/</a></p><h1 id="苹果CMS是一个影视，图片，小说等网站的，内容管理系统，被成为苹果CMS。"><a href="#苹果CMS是一个影视，图片，小说等网站的，内容管理系统，被成为苹果CMS。" class="headerlink" title="苹果CMS是一个影视，图片，小说等网站的，内容管理系统，被成为苹果CMS。"></a>苹果CMS是一个影视，图片，小说等网站的，内容管理系统，被成为苹果CMS。</h1><p>开源免费十分好用</p><h2 id="1-手动搭建方法"><a href="#1-手动搭建方法" class="headerlink" title="1.手动搭建方法"></a>1.手动搭建方法</h2><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><pre><code class="hljs plaintext">apt update -y  &amp;&amp; apt upgrade -y &amp;&amp; apt install -y curl wget sudo socat</code></pre><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><pre><code class="hljs plaintext">curl -fsSL https://get.docker.com | shcurl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre><code class="hljs plaintext">cd /homemkdir webcd webmkdir htmlmkdir mysqlmkdir certstouch nginx.confnano docker-compose.yml</code></pre><h3 id="配置docker-compose"><a href="#配置docker-compose" class="headerlink" title="配置docker-compose"></a>配置docker-compose</h3><p><a href="https://github.com/kejilion/docker/blob/main/LNMP-docker-compose.yml">https://github.com/kejilion/docker/blob/main/LNMP-docker-compose.yml</a></p><h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><pre><code class="hljs plaintext">curl https://get.acme.sh | sh~/.acme.sh/acme.sh --register-account -m xxxx@gmail.com~/.acme.sh/acme.sh --issue -d mac.kejilion.eu.org --standalone</code></pre><h3 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h3><p>~&#x2F;.acme.sh&#x2F;acme.sh –installcert -d mac.kejilion.eu.org –key-file &#x2F;home&#x2F;web&#x2F;certs&#x2F;key.pem –fullchain-file &#x2F;home&#x2F;web&#x2F;certs&#x2F;cert.pem</p><h3 id="NGINX配置"><a href="#NGINX配置" class="headerlink" title="NGINX配置"></a>NGINX配置</h3><p><a href="https://github.com/kejilion/nginx/blob/main/nginx.conf">https://github.com/kejilion/nginx/blob/main/nginx.conf</a></p><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>cd &#x2F;home&#x2F;web&#x2F;html &amp;&amp; wget <a href="https://github.com/magicblack/maccms_down/raw/master/maccms10.zip">https://github.com/magicblack/maccms_down/raw/master/maccms10.zip</a> &amp;&amp; sudo apt-get install -y unzip &amp;&amp; unzip maccms10.zip &amp;&amp; rm maccms10.zip &amp;&amp; mv &#x2F;home&#x2F;web&#x2F;html&#x2F;maccms10-master&#x2F;* &#x2F;home&#x2F;web&#x2F;html&#x2F;</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>cd &#x2F;home&#x2F;web&#x2F;html&#x2F;template&#x2F; &amp;&amp; wget <a href="https://github.com/kejilion/Website_source_code/raw/main/DYXS2.zip">https://github.com/kejilion/Website_source_code/raw/main/DYXS2.zip</a> &amp;&amp; unzip DYXS2.zip &amp;&amp; rm &#x2F;home&#x2F;web&#x2F;html&#x2F;template&#x2F;DYXS2.zip </p><p>cp &#x2F;home&#x2F;web&#x2F;html&#x2F;template&#x2F;DYXS2&#x2F;asset&#x2F;admin&#x2F;Dyxs2.php &#x2F;home&#x2F;web&#x2F;html&#x2F;application&#x2F;admin&#x2F;controller </p><p>cp &#x2F;home&#x2F;web&#x2F;html&#x2F;template&#x2F;DYXS2&#x2F;asset&#x2F;admin&#x2F;dycms.html &#x2F;home&#x2F;web&#x2F;html&#x2F;application&#x2F;admin&#x2F;view&#x2F;system</p><h3 id="修改登录设置"><a href="#修改登录设置" class="headerlink" title="修改登录设置"></a>修改登录设置</h3><p>mv &#x2F;home&#x2F;web&#x2F;html&#x2F;admin.php &#x2F;home&#x2F;web&#x2F;html&#x2F;vip.php &amp;&amp; wget -O &#x2F;home&#x2F;web&#x2F;html&#x2F;application&#x2F;extra&#x2F;maccms.php <a href="https://raw.githubusercontent.com/kejilion/Website_source_code/main/maccms.php">https://raw.githubusercontent.com/kejilion/Website_source_code/main/maccms.php</a></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>cd &#x2F;home&#x2F;web &amp;&amp; docker-compose up -d</p><h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><p>docker exec -it nginx chmod -R 777 &#x2F;var&#x2F;www&#x2F;html</p><p>docker exec -it php chmod -R 777 &#x2F;var&#x2F;www&#x2F;html</p><h3 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h3><p>docker exec php apt update &amp;&amp; docker exec php apt install -y libmariadb-dev-compat libmariadb-dev libzip-dev libmagickwand-dev imagemagick</p><p>docker exec php docker-php-ext-install pdo_mysql zip bcmath gd intl opcache</p><p>docker exec php pecl install imagick &amp;&amp; docker exec php sh -c ‘echo “extension&#x3D;imagick.so” &gt; &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;conf.d&#x2F;imagick.ini’</p><h3 id="重启php"><a href="#重启php" class="headerlink" title="重启php"></a>重启php</h3><p>docker restart php</p><h3 id="查看php扩展启用情况"><a href="#查看php扩展启用情况" class="headerlink" title="查看php扩展启用情况"></a>查看php扩展启用情况</h3><p>docker exec -it php php -m</p><h3 id="后台自定义菜单管理主题"><a href="#后台自定义菜单管理主题" class="headerlink" title="后台自定义菜单管理主题"></a>后台自定义菜单管理主题</h3><p>电影先生2.0,&#x2F;vip.php&#x2F;admin&#x2F;Dyxs2&#x2F;dyxs2set</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>crontab -e</p><p>30 * * * * wget -O &#x2F;dev&#x2F;null <a href="https://mac.kejilion.eu.org/api.php/timming/index.html?enforce=1&name=aa">https://mac.kejilion.eu.org/api.php/timming/index.html?enforce=1&amp;name=aa</a></p><h2 id="2-自动搭建方法"><a href="#2-自动搭建方法" class="headerlink" title="2.自动搭建方法"></a>2.自动搭建方法</h2><p>Windows安装python</p><p><a href="https://www.python.org/">https://www.python.org/</a></p><h3 id="安装python环境"><a href="#安装python环境" class="headerlink" title="安装python环境"></a>安装python环境</h3><p>cmd命令行输入下面的命令，到达目录安装依赖</p><p>cmd C:\py\</p><p>python -m pip install –upgrade pip</p><p>python -m pip install paramiko speedtest-cli </p><h3 id="下载并配置自动化脚本"><a href="#下载并配置自动化脚本" class="headerlink" title="下载并配置自动化脚本"></a>下载并配置自动化脚本</h3><p><a href="https://github.com/kejilion/python-for-vps/blob/main/%E4%B8%80%E9%94%AE%E6%89%80%E6%9C%89VPS%E9%83%A8%E7%BD%B2%E8%8B%B9%E6%9E%9CCMS.py">苹果CMS自动化搭建脚本</a></p><h3 id="后台自定义菜单管理主题-1"><a href="#后台自定义菜单管理主题-1" class="headerlink" title="后台自定义菜单管理主题"></a>后台自定义菜单管理主题</h3><p>电影先生2.0,&#x2F;vip.php&#x2F;admin&#x2F;Dyxs2&#x2F;dyxs2set</p><h3 id="定时任务-1"><a href="#定时任务-1" class="headerlink" title="定时任务"></a>定时任务</h3><p>(crontab -l ; echo “30 * * * * wget -O &#x2F;dev&#x2F;null <a href="https://mac.kejilion.eu.org/api.php/timming/index.html?enforce=1&name=aa">https://mac.kejilion.eu.org/api.php/timming/index.html?enforce=1&amp;name=aa</a>“) | crontab -</p><p>差不多长这样！</p>]]></content>
      
      
      <categories>
          
          <category> 实用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哪吒监控 哪吒监控接入 Github、Gitlab、Jihulab、Gitee 作为后台管理员账号</title>
      <link href="/article/2023-8-1_NeZha/"/>
      <url>/article/2023-8-1_NeZha/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/NeZha.png"></p><h1 id="获取-Github-Jihulab-的-Client-ID-和密钥"><a href="#获取-Github-Jihulab-的-Client-ID-和密钥" class="headerlink" title="获取 Github&#x2F;Jihulab 的 Client ID 和密钥"></a><strong>获取 Github&#x2F;Jihulab 的 Client ID 和密钥<a href="https://nezha.wiki/guide/dashboard.html#%E8%8E%B7%E5%8F%96-github-jihulab-%E7%9A%84-client-id-%E5%92%8C%E5%AF%86%E9%92%A5"></a></strong></h1><p>哪吒监控接入 Github、Gitlab、Jihulab、Gitee 作为后台管理员账号</p><ul><li>首先我们需要新建一个验证应用，以 Github 为例，登录 Github 后，打开 <strong><a href="https://github.com/settings/developers">https://github.com/settings/developers</a></strong> ，依次选择“OAuth Apps” - “New OAuth App”<code>Application name</code> - 随意填写<code>Homepage URL</code> - 填写面板的访问域名，如：”<strong><a href="http://cdn.example.com/">http://cdn.example.com</a></strong>“<code>Authorization callback URL</code> - 填写回调地址，如：”<strong><a href="http://cdn.example.com/oauth2/callback">http://cdn.example.com/oauth2/callback</a></strong>“</li><li>点击 “Register application”</li><li>保存页面中的 Client ID，然后点击 “Generate a new client secret“，创建一个新的 Client Secret，新建的密钥仅会显示一次，请妥善保存</li><li>JihuLab 的应用创建入口为：<strong><a href="https://jihulab.com/-/profile/applications">https://jihulab.com/-/profile/applications</a></strong></li><li><code>Redirect URL</code> 中应填入回调地址</li><li>在下方<code>范围</code>中勾选 <code>read_user</code> 和 <code>read_api</code></li><li>创建完成后，保存好应用程序 ID 和密码</li></ul><h1 id="在服务器中安装-Dashboard"><a href="#在服务器中安装-Dashboard" class="headerlink" title="在服务器中安装 Dashboard"></a><strong>在服务器中安装 Dashboard<a href="https://nezha.wiki/guide/dashboard.html#%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E5%AE%89%E8%A3%85-dashboard"></a></strong></h1><ul><li>在面板服务器中，运行安装脚本：</li></ul><p><strong>bash</strong></p><pre><code class="hljs plaintext">curl -L https://raw.githubusercontent.com/naiba/nezha/master/script/install.sh  -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo ./nezha.sh</code></pre><p>如果你的面板服务器位于中国大陆，可以使用镜像：</p><p><strong>bash</strong></p><pre><code class="hljs plaintext">curl -L https://cdn.jsdelivr.net/gh/naiba/nezha@master/script/install.sh -o nezha.sh &amp;&amp; chmod +x nezha.sh &amp;&amp; sudo CN=true ./nezha.sh</code></pre><ul><li><p>等待Docker安装完毕后，分别输入以下值：</p><p>  <code>OAuth提供商</code> - Github，Gitlab，Jihulab，Gitee 中选择一个</p><p>  <code>Client ID</code> - 之前保存的 Client ID</p><p>  <code>Client Secret</code> - 之前保存的密钥</p><p>  <code>用户名</code> - OAuth 提供商中的用户名</p><p>  <code>站点标题</code> - 自定义站点标题</p><p>  <code>访问端口</code> - 公开访问端口，可自定义，默认 8008</p><p>  <code>Agent的通信端口</code> - Agent与Dashboard的通信端口，默认 5555</p></li><li><p>输入完成后，等待拉取镜像</p><p>  安装结束后，如果一切正常，此时你可以访问域名+端口号，如 “**<a href="http://cdn.example.com:8008/">http://cdn.example.com:8008</a>**” 来查看面板</p></li><li><p>将来如果需要再次运行脚本，可以运行：</p></li></ul><p><strong>bash</strong></p><pre><code class="hljs plaintext">./nezha.sh</code></pre><p>来打开管理脚本</p><h1 id="哪吒监控官网"><a href="#哪吒监控官网" class="headerlink" title="哪吒监控官网"></a><a href="https://nezha.wiki/">哪吒监控官网</a></h1><h2 id="TG机器人"><a href="#TG机器人" class="headerlink" title="TG机器人"></a>TG机器人</h2><p>设置先申请一个机器人 @Botfather ，然后&#x2F;newbot ，创建新的机器人（bot）时，会提供的 token（在提示 Use this token to access the HTTP API:后面一行）这里 ‘bot’ 三个字母不可少；然后获取自己TG的数字Id, 和这个机器人 @userinfobot 对话可获得一串数字；这两个保存下来，一会备用。</p><p>进入面板机后台，报警——先添加通知方式，格式为</p><pre><code class="hljs plaintext">https://api.telegram.org/botXXXXXX/sendMessage?chat_id=YYYYYY&amp;text=#NEZHA#其中bot后面的XXX为机器人的token，chat_id为你自己TG的ID。</code></pre><p>然后添加报警规则，常用的离线规则为</p><pre><code class="hljs plaintext">[&#123;&quot;Type&quot;:&quot;offline&quot;,&quot;Duration&quot;:30&#125;]</code></pre><p>设置后记得设为启动就行。更多类似于监控cpu、内存报警等等，就查看作者仓库吧~</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Proxy Manager 安装使用一键脚本</title>
      <link href="/article/2023-8-1_NPM/"/>
      <url>/article/2023-8-1_NPM/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/NPM.png"></p><h3 id="安装-Docker-环境"><a href="#安装-Docker-环境" class="headerlink" title="安装 Docker 环境"></a><strong>安装 Docker 环境</strong></h3><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a><strong>安装 Docker</strong></h3><pre><code class="hljs plaintext">wget -qO- get.docker.com | bash</code></pre><pre><code class="hljs plaintext">docker -v  #查看 docker 版本</code></pre><pre><code class="hljs plaintext">systemctl enable docker  # 设置开机自动启动</code></pre><h3 id="安装-Docker-compose"><a href="#安装-Docker-compose" class="headerlink" title="安装 Docker-compose"></a><strong>安装 Docker-compose</strong></h3><pre><code class="hljs plaintext">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></pre><pre><code class="hljs plaintext">sudo chmod +x /usr/local/bin/docker-compose</code></pre><pre><code class="hljs plaintext">docker-compose --version  #查看 docker-compose 版本</code></pre><h3 id="修改-Docker-配置（可选）"><a href="#修改-Docker-配置（可选）" class="headerlink" title="修改 Docker 配置（可选）"></a><strong>修改 Docker 配置（可选）</strong></h3><p>内容参考：<a href="https://u.sb/debian-install-docker/">烧饼博客</a></p><p>以下配置会增加一段自定义内网 IPv6 地址，开启容器的 IPv6 功能，以及限制日志文件大小，防止 Docker 日志塞满硬盘（泪的教训）：</p><pre><code class="hljs plaintext">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF&#123;    &quot;log-driver&quot;: &quot;json-file&quot;,    &quot;log-opts&quot;: &#123;        &quot;max-size&quot;: &quot;20m&quot;,        &quot;max-file&quot;: &quot;3&quot;    &#125;,    &quot;ipv6&quot;: true,    &quot;fixed-cidr-v6&quot;: &quot;fd00:dead:beef:c0::/80&quot;,    &quot;experimental&quot;:true,    &quot;ip6tables&quot;:true&#125;EOF</code></pre><p>然后重启 Docker 服务：</p><pre><code class="hljs plaintext">systemctl restart docker</code></pre><h3 id="安装-Nginx-Proxy-Manager"><a href="#安装-Nginx-Proxy-Manager" class="headerlink" title="安装 Nginx Proxy Manager"></a><strong>安装 Nginx Proxy Manager</strong></h3><h3 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a><strong>创建安装目录</strong></h3><p>创建一下安装的目录：</p><pre><code class="hljs plaintext">sudo -imkdir -p /root/data/docker_data/npmcd /root/data/docker_data/npm</code></pre><p>这边我们直接用 docker 的方式安装。</p><pre><code class="hljs plaintext">vim docker-compose.yml</code></pre><p>英文输入法下，按 <code>i</code></p><pre><code class="hljs plaintext">version: &#x27;3&#x27;services:  app:    image: &#x27;jc21/nginx-proxy-manager:latest&#x27;    restart: unless-stopped    ports:      - &#x27;80:80&#x27;  # 冒号左边可以改成自己服务器未被占用的端口      - &#x27;81:81&#x27;  # 冒号左边可以改成自己服务器未被占用的端口      - &#x27;443:443&#x27; # 冒号左边可以改成自己服务器未被占用的端口    volumes:      - ./data:/data # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 data 文件夹中      - ./letsencrypt:/etc/letsencrypt  # 冒号左边可以改路径，现在是表示把数据存放在在当前文件夹下的 letsencrypt 文件夹中</code></pre><p>按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出，之后，</p><p>查看端口是否被占用（以 <code>81</code> 为例），输入：</p><pre><code class="hljs plaintext">lsof -i:81  #查看 81 端口是否被占用，如果被占用，重新自定义一个端口</code></pre><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><pre><code class="hljs plaintext">-bash: lsof: command not found</code></pre><p>运行：</p><pre><code class="hljs plaintext">apt install lsof  #安装 lsof</code></pre><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>82</code>，注意 docker 命令行里和防火墙都要改）</p><h3 id="运行并访问-Nginx-Proxy-Manager"><a href="#运行并访问-Nginx-Proxy-Manager" class="headerlink" title="运行并访问 Nginx Proxy Manager"></a><strong>运行并访问 Nginx Proxy Manager</strong></h3><p>最后：</p><pre><code class="hljs plaintext">cd /root/data/docker_data/npm   # 来到 dockercompose 文件所在的文件夹下docker-compose up -d</code></pre><p>理论上我们就可以输入 <code>http://ip:81</code> 访问了。</p><p>默认登陆名和密码：</p><pre><code class="hljs plaintext">Email:    admin@example.comPassword: changeme</code></pre><blockquote><p>注意：</p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><h3 id="更新-Nginx-Proxy-Manager"><a href="#更新-Nginx-Proxy-Manager" class="headerlink" title="更新 Nginx Proxy Manager"></a><strong>更新 Nginx Proxy Manager</strong></h3><pre><code class="hljs plaintext">cd /root/data/docker_data/npmdocker-compose downcp -r /root/data/docker_data/npm /root/data/docker_data/npm.archive  # 万事先备份，以防万一docker-compose pulldocker-compose up -d    # 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。docker image prune  # prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</code></pre><p>提示：</p><pre><code class="hljs plaintext">WARNING! This will remove all dangling images.Are you sure you want to continue? [y/N]</code></pre><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="卸载-Nginx-Proxy-Manager"><a href="#卸载-Nginx-Proxy-Manager" class="headerlink" title="卸载 Nginx Proxy Manager"></a><strong>卸载 Nginx Proxy Manager</strong></h3><pre><code class="hljs plaintext">cd /root/data/docker_data/npmdocker-compose down rm -rf /root/data/docker_data/npm  # 完全删除映射到本地的数据`</code></pre>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Outline 使用此服务器以安全地访问开放互联网</title>
      <link href="/article/2023-4-30_outline/"/>
      <url>/article/2023-4-30_outline/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/outline.png"></p><h1 id="使用此服务器以安全地访问开放互联网："><a href="#使用此服务器以安全地访问开放互联网：" class="headerlink" title="使用此服务器以安全地访问开放互联网："></a>使用此服务器以安全地访问开放互联网：</h1><ol><li>为您的设备下载并安装 Outline 应用：</li></ol><ul><li>iOS：<a href="https://itunes.apple.com/app/outline-app/id1356177741">https://itunes.apple.com/app/outline-app/id1356177741</a></li><li>MacOS：<a href="https://itunes.apple.com/app/outline-app/id1356178125">https://itunes.apple.com/app/outline-app/id1356178125</a></li><li>Windows：<a href="https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe">https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe</a></li><li>Linux：<a href="https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage">https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage</a></li><li>Android：<a href="https://play.google.com/store/apps/details?id=org.outline.android.client">https://play.google.com/store/apps/details?id=org.outline.android.client</a></li><li>Android 替代链接：<a href="https://s3.amazonaws.com/outline-releases/client/android/stable/Outline-Client.apk">https://s3.amazonaws.com/outline-releases/client/android/stable/Outline-Client.apk</a></li></ul><ol start="2"><li><p>您会收到一个以 ss:&#x2F;&#x2F; 开头的访问密钥。收到该密钥后，请复制此访问密钥。</p></li><li><p>打开 Outline 客户端应用。如果系统自动检测到您的访问密钥，请点按“连接”并继续。如果系统未自动检测您的访问密钥，请将其粘贴到该字段中，然后点按“连接”并继续。</p></li></ol><p>您可以使用开放互联网了！为了确保您已成功连接到服务器，请尝试在 Google 搜索中搜索“what is my ip”。Google 中显示的 IP 地址应与 Outline 客户端中的 IP 地址一致。</p><p>如需详细了解 Outline，请访问 <a href="https://getoutline.org/">https://getoutline.org/</a></p><h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a><a href="https://getoutline.org/">Outline</a></h1><h1 id="Access-to-the-free-and-open-Internet"><a href="#Access-to-the-free-and-open-Internet" class="headerlink" title="Access to the free and open Internet"></a>Access to the free and open Internet</h1><p>Outline makes it easy to create a VPN server, giving anyone access to the free and open internet.</p><h1 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h1><p>Two Products That Work Together<br>Outline consists of two interrelated products that work together to provide you and your community with uninterrupted access to the internet.</p><p>Laptop</p><h3 id="GET-OUTLINE-MANAGER"><a href="#GET-OUTLINE-MANAGER" class="headerlink" title="GET OUTLINE MANAGER"></a>GET OUTLINE MANAGER</h3><p>Mobile</p><h3 id="GET-OUTLINE-CLIENT"><a href="#GET-OUTLINE-CLIENT" class="headerlink" title="GET OUTLINE CLIENT"></a>GET OUTLINE CLIENT</h3>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Live VPS 服务器24H直播</title>
      <link href="/article/2023-4-21_live/"/>
      <url>/article/2023-4-21_live/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/LIve.png" alt="Live"></p><p>查看资源占用</p><pre><code class="hljs plaintext">htop</code></pre><p><strong>连上VPS更新系统</strong></p><pre><code class="hljs plaintext">apt update -y  &amp;&amp; apt upgrade -y &amp;&amp; apt install -y curl wget sudo socat htop ffmpeg</code></pre><p><strong>直播指定视频（自适应）</strong></p><pre><code class="hljs plaintext">nohup ffmpeg -stream_loop -1 -re -i /home/mp4/12.mp4 -c copy -f flv rtmp://a.rtmp.youtube.com/live2/fu2g-3dex-vdyu-vc5p-f6cb &gt; /dev/null 2&gt;&amp;1 &amp;</code></pre><p><strong>直播指定视频（低流量）</strong></p><pre><code class="hljs plaintext">nohup ffmpeg -re -stream_loop -1 -i /home/mp4/12.mp4 -c:v libx264 -b:v 500k -maxrate 500k -bufsize 1000k -c:a copy -f flv &quot;rtmp://a.rtmp.youtube.com/live2/fu2g-3dex-vdyu-vc5p-f6cb&quot; &gt; /dev/null 2&gt;&amp;1 &amp;</code></pre><p><strong>查看运行状态</strong></p><pre><code class="hljs plaintext">ps -ef | grep ffmpeg</code></pre><p><strong>停止</strong></p><pre><code class="hljs plaintext">reboot</code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>E：找不到包 sudo socat<br>E：无法找到包顶部 ffmpeg</p><p>错误消息“找不到包”表示您尝试安装的包在系统当前配置为使用的存储库中不可用。</p><p>要解决此问题，您可以尝试以下步骤：</p><ol><li><p>使用以下命令更新系统的软件包列表：</p> <pre><code class="hljs plaintext">sudo apt-get update</code></pre></li><li><p>更新完成后，请尝试使用以下命令再次安装软件包：</p> <pre><code class="hljs plaintext">sudo apt-get install sudo socat htop ffmpeg</code></pre></li><li><p>如果仍然找不到包，则可能是它们在您当前使用的存储库中不可用。在这种情况下，您可以尝试按照软件包的开发人员或分发者提供的说明向系统添加新存储库。</p></li><li><p>如果仍然无法安装软件包，可以尝试手动下载它们并使用以下命令进行安装：</p> <pre><code class="hljs plaintext">sudo dpkg -i package_name.deb</code></pre><p> 将“package_name.deb”替换为您下载的软件包文件的实际名称。如果包具有系统上不可用的依赖项，则此方法可能不起作用。</p></li></ol><p>我希望这有帮助！</p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x-ui 一键安装脚本</title>
      <link href="/article/2023-4-20_x-ui/"/>
      <url>/article/2023-4-20_x-ui/</url>
      
        <content type="html"><![CDATA[<h1 id="X-UI一键脚本"><a href="#X-UI一键脚本" class="headerlink" title="X-UI一键脚本"></a>X-UI一键脚本</h1><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)</code></pre><h1 id="安装与升级"><a href="#安装与升级" class="headerlink" title="安装与升级"></a><strong>安装与升级</strong></h1><p><a href="https://github.com/MHSanaei/3x-ui/blob/main/README.zh.md">3x-ui&#x2F;README.zh.md at main · MHSanaei&#x2F;3x-ui</a></p><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)</code></pre><p><strong>安装指定版本</strong><br>要安装所需的版本，请在版本中添加到安装命令的结果。eg, ver <code>v2.2.8</code>:</p><p><code>bash &lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh) v2.2.8</code></p><p>• 系统状态监控<br>• 在所有入口和客户端中搜索<br>• 深度&#x2F;浅色主题<br>• 支持多用户和多协议<br>• 支持多种协议，包括VMess、VLESS、Trojan、Shadowsocks、Dokodemo-door、Socks、HTTP、wireguard<br>• 支持XTLS协议，包括RPRX-Direct、Vision、REALITY<br>• 流量统计、流量限制、超时时间限制<br>• 可自定义的 Xray 配置模板<br>• 支持HTTPS访问面板（自建域名+SSL证书）<br>• 支持一键式SSL证书申请和自动续费<br>• 更多高级配置项目请参考面板<br>• 修复了API路由（用户设置将使用API创建）<br>• 支持通过面板中提供的不同项目更改配置。</p><h1 id="X-UI一键脚本-1"><a href="#X-UI一键脚本-1" class="headerlink" title="X-UI一键脚本"></a>X-UI一键脚本</h1><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://raw.githubusercontent.com/wangwenzhiwwz/x-ui/master/install.sh)</code></pre><pre><code class="hljs plaintext">bash &lt;(wget -qO- https://raw.githubusercontent.com/sing-web/x-ui/main/install_CN.sh)</code></pre><p>安装完成后默认是IP:54321访问面板。默认密码是admin；admin，默认密码不安全，请到面板后台更改用户名和密码。</p><pre><code class="hljs plaintext">/root/CF.pem</code></pre><pre><code class="hljs plaintext">/root/CF.key</code></pre><h1 id="TLS安装前准备步骤"><a href="#TLS安装前准备步骤" class="headerlink" title="TLS安装前准备步骤"></a>TLS安装前准备步骤</h1><h1 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h1><p>其实不需要SOCAT也可以，不过安装X-UI以后我们使用v2或者trojan的ssl加密的时候需要ssl证书，这个时候我们需要Acme配合NGINX&#x2F;SOCAT申请证书。</p><p>当你的服务器上有nginx或者宝塔面板时，就不需要安装socat了，在这个时候执行是申请SSL脚本会提示80端口被占用出错。</p><h1 id="1-Debian-Ubuntu安装socat"><a href="#1-Debian-Ubuntu安装socat" class="headerlink" title="1. Debian&#x2F;Ubuntu安装socat"></a>1. Debian&#x2F;Ubuntu安装socat</h1><pre><code class="hljs plaintext">apt update -y</code></pre><pre><code class="hljs plaintext">apt install -y curl</code></pre><pre><code class="hljs plaintext">apt install -y socat</code></pre><h1 id="2-centos安装socat"><a href="#2-centos安装socat" class="headerlink" title="2. centos安装socat"></a>2. centos安装socat</h1><ul><li>yum update -y</li><li>yum install -y curl</li><li>yum install -y socat</li></ul><h1 id="安装-Acme"><a href="#安装-Acme" class="headerlink" title="安装 Acme"></a>安装 Acme</h1><pre><code class="hljs plaintext">curl https://get.acme.sh | sh</code></pre><h1 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h1><p>需要准备一个邮箱（非必须）和域名解析到你的IP</p><pre><code class="hljs plaintext">~/.acme.sh/acme.sh –register-account -m 99218632@qq.com</code></pre><pre><code class="hljs plaintext">~/.acme.sh/acme.sh –issue -d wwz1997.eu.org –standalone</code></pre><h1 id="改证书存放位置"><a href="#改证书存放位置" class="headerlink" title="改证书存放位置"></a>改证书存放位置</h1><pre><code class="hljs plaintext">~/.acme.sh/acme.sh –installcert -d wwz1997.eu.org  –key-file /root/private.key –fullchain-file /root/cert.crt</code></pre><h1 id="TLS具体配置"><a href="#TLS具体配置" class="headerlink" title="TLS具体配置"></a>TLS具体配置</h1><h1 id="1-怎么开启TLS"><a href="#1-怎么开启TLS" class="headerlink" title="1. 怎么开启TLS"></a>1. 怎么开启TLS</h1><p>在后台选择搭建节点的时候是vmess&#x2F;trojan&#x2F;ss&#x2F;vless等都可以开启tls选项。开启TLS选项后需要绑定域名，这里我们填写刚刚申请了ssl的域名，证书位置是 &#x2F;root&#x2F;cert.crt 密钥位置是 &#x2F;root&#x2F;private.key</p><p>端口选择443，注意因为x-ui没有域名回落，所以我们搭建在443上的翻墙只能有一个。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> 一键脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT 搭建自用网站</title>
      <link href="/article/2023-04-03_ChatGPT/"/>
      <url>/article/2023-04-03_ChatGPT/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/ChatGPT.png"></p><h3 id="VPS-部署-ChatGPT"><a href="#VPS-部署-ChatGPT" class="headerlink" title="VPS 部署 ChatGPT"></a><strong>VPS 部署 ChatGPT</strong></h3><p>今天使用的 VPS 来自 搬瓦工（机型：<a href="https://v2rayssr.com/go?url=https://bwh88.net/aff.php?aff=54757&pid=88">KVMV5-40G-2G-2T-CA-CN2GIA</a>），系统为 Ubuntu 22.04 x86_64 。</p><p>首先安装 Docker 服务，这里使用官方的一键脚本进行安装</p><pre><code class="hljs plaintext">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></pre><p>Docker ChatGPT 部署命</p><pre><code class="hljs plaintext">docker run \--name chatgpt-web \-p 3002:3002 \--env OPENAI_API_KEY=Your-OpenAi-API \--restart always \-d chenzhaoyu94/chatgpt-web:latest</code></pre><p>部署完毕以后，访问 <a href="http://ip:3002/">http://IP:3002</a> ，检测 ChatGPT 是否部署成功</p><p><img src="https://v2rayssr.com/wp-content/uploads/2023/03/1233.png" alt="https://v2rayssr.com/wp-content/uploads/2023/03/1233.png"></p><h3 id="OpenWRT-部署-ChatGPT"><a href="#OpenWRT-部署-ChatGPT" class="headerlink" title="OpenWRT 部署 ChatGPT"></a><strong>OpenWRT 部署 ChatGPT</strong></h3><p>对于 OpenWRT 如何进行 Docker 的部署和使用，上期博文有介绍，大家可以详细的了解：<a href="https://v2rayssr.com/openwrt-emby.html">点击访问</a></p><p>来到 OpenWRT 的 Docker 服务，点击 容器 – 添加 – 命令行，贴入上面的 Docker 命令，保存应用即可。</p><p><img src="https://v2rayssr.com/wp-content/uploads/2023/03/1-1.png" alt="https://v2rayssr.com/wp-content/uploads/2023/03/1-1.png"></p><p>启动 Docker 容器，访问 <a href="http://ip:3002/">http://ip:3002</a></p><p><img src="https://v2rayssr.com/wp-content/uploads/2023/03/22.png" alt="https://v2rayssr.com/wp-content/uploads/2023/03/22.png"></p><h1 id="ChatGPT-软件推荐"><a href="#ChatGPT-软件推荐" class="headerlink" title="ChatGPT 软件推荐"></a><strong>ChatGPT 软件推荐</strong></h1><p>ChatGPT 的软件很多，这边推荐大家使用 ChatBox 这款开源软件。</p><p>ChatBox GitHub 项目地址：<a href="https://v2rayssr.com/go?url=https://github.com/Bin-Huang/">点击访问</a></p><p>ChatBox GitHub 客户端下载地址：<a href="https://v2rayssr.com/go?url=https://github.com/Bin-Huang/chatbox/releases">点击访问</a></p><p><img src="https://v2rayssr.com/wp-content/uploads/2023/03/121212.png" alt="https://v2rayssr.com/wp-content/uploads/2023/03/121212.png"></p><h1 id="ChatGPT-的使用"><a href="#ChatGPT-的使用" class="headerlink" title="ChatGPT 的使用"></a><strong>ChatGPT 的使用</strong></h1><p>作为一个强大的 AI 语言程序，我认为，只是你的想像和命令的准确性受到了局限，其他对于它来说，一切都是渣渣！</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF WARP解锁ChatGPT</title>
      <link href="/article/2023-02-28_CF/"/>
      <url>/article/2023-02-28_CF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/ai.png"></p><h3 id="WARP多功能一键脚本"><a href="#WARP多功能一键脚本" class="headerlink" title="WARP多功能一键脚本"></a>WARP多功能一键脚本</h3><h3 id="支持纯IPV4、纯IPV6的VPS直接安装，主流linux系统均支持"><a href="#支持纯IPV4、纯IPV6的VPS直接安装，主流linux系统均支持" class="headerlink" title="支持纯IPV4、纯IPV6的VPS直接安装，主流linux系统均支持"></a><a href="https://github.com/yonggekkk/CFwarp-yg#%E6%94%AF%E6%8C%81%E7%BA%AFipv4%E7%BA%AFipv6%E7%9A%84vps%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%E4%B8%BB%E6%B5%81linux%E7%B3%BB%E7%BB%9F%E5%9D%87%E6%94%AF%E6%8C%81"></a>支持纯IPV4、纯IPV6的VPS直接安装，主流linux系统均支持</h3><h3 id="支持warp-go与wgcf两种warp内核形式切换"><a href="#支持warp-go与wgcf两种warp内核形式切换" class="headerlink" title="支持warp-go与wgcf两种warp内核形式切换"></a><a href="https://github.com/yonggekkk/CFwarp-yg#%E6%94%AF%E6%8C%81warp-go%E4%B8%8Ewgcf%E4%B8%A4%E7%A7%8Dwarp%E5%86%85%E6%A0%B8%E5%BD%A2%E5%BC%8F%E5%88%87%E6%8D%A2"></a>支持warp-go与wgcf两种warp内核形式切换</h3><h3 id="相关说明及注意点请查看博客说明"><a href="#相关说明及注意点请查看博客说明" class="headerlink" title="相关说明及注意点请查看博客说明"></a><a href="https://github.com/yonggekkk/CFwarp-yg#%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AF%B7%E6%9F%A5%E7%9C%8B%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E"></a>相关说明及注意点请查看<a href="https://www.youtube.com/playlist?list=PLMgly2AulGG-WqPXPkHlqWVSfQ3XjHNw8">博客说明</a></h3><hr><h3 id="一键脚本："><a href="#一键脚本：" class="headerlink" title="一键脚本："></a><a href="https://github.com/yonggekkk/CFwarp-yg#%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC"></a>一键脚本：</h3><p><code>wget -N --no-check-certificate https://gitlab.com/rwkgyg/CFwarp/raw/main/CFwarp.sh &amp;&amp; bash CFwarp.sh</code></p><p><img src="https://user-images.githubusercontent.com/121604513/219865326-5db3b9dc-fabc-4a09-a4b1-8ae8a921edc8.png" alt="https://user-images.githubusercontent.com/121604513/219865326-5db3b9dc-fabc-4a09-a4b1-8ae8a921edc8.png"></p><h3 id="脚本源码备份Gitlab地址"><a href="#脚本源码备份Gitlab地址" class="headerlink" title="脚本源码备份Gitlab地址"></a>脚本源码备份<a href="https://gitlab.com/rwkgyg/CFwarp">Gitlab地址</a></h3><p><strong>视频教程：</strong></p><p><strong><a href="https://youtu.be/28E1oNzitiY">Chatgpt注册接码TG聊天一条龙保姆级教程：让所有vps解锁Chatgpt官网登录，免费接码注册chatgpt，VPS一键chatgpt脚本，支持telegram-bot机器人聊天</a></strong></p><hr><p><strong>说明链接：</strong></p><p><strong><a href="https://github.com/yonggekkk/CFwarp-yg">warp脚本</a></strong></p><p><strong><a href="https://chat.openai.com/auth/login">Chatgpt注册</a></strong></p><p><strong><a href="https://m.apkpure.com/cn/search?q=2nr&t=">2NR的apk直接下载</a></strong></p><p><strong><a href="https://platform.openai.com/account/api-keys/">查询Chatgpt的APIkey及账户余额</a></strong></p><p><strong><a href="https://github.com/yonggekkk/chatgpt-tg-bot-script">Chatgpt一键TG聊天脚本</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> 一键脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甲骨文 ( oracle )</title>
      <link href="/article/2023-02-19_oracle/"/>
      <url>/article/2023-02-19_oracle/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p><img src="https://wangwenzhi.eu.org/images/images/Oracle.png" alt="https://wangwenzhi.eu.org/images/images/Oracle.png"></p><pre><code class="hljs plaintext">sudo -iecho root:password |chpasswd rootsed -i &#x27;s/^#\\?PermitRootLogin.*/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config;sed -i &#x27;s/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config;service sshd restart</code></pre>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS亚马逊云 AWS亚马逊云永久免费CDN服务</title>
      <link href="/article/2023-2-19_AWS/"/>
      <url>/article/2023-2-19_AWS/</url>
      
        <content type="html"><![CDATA[<h1 id="教程文档"><a href="#教程文档" class="headerlink" title="教程文档"></a><strong>教程文档</strong></h1><p><img src="https://wangwenzhi.eu.org/images/images/aws.png" alt="https://wangwenzhi.eu.org/images/images/aws.png"></p><p><a href="https://bulianglin.com/archives/cft.html">AWS亚马逊云永久免费CDN服务 - cloudfront - 科学上网 技术分享</a><br>优选IP工具：<a href="https://bulianglin.com/g/aHR0cHM6Ly9naXRodWIuY29tL1hJVTIvQ2xvdWRmbGFyZVNwZWVkVGVzdA">https://github.com/XIU2/CloudflareSpeedTest</a><br>测速地址：<a href="https://bulianglin.com/g/aHR0cHM6Ly9jYWNoZWZseS5jYWNoZWZseS5uZXQvMTAwbWIudGVzdA">https://cachefly.cachefly.net/100mb.test</a><br>CFT IP段：<a href="https://bulianglin.com/g/aHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FtYXpvbkNsb3VkRnJvbnQvbGF0ZXN0L0RldmVsb3Blckd1aWRlL0xvY2F0aW9uc09mRWRnZVNlcnZlcnMuaHRtbA">https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/LocationsOfEdgeServers.html</a></p><blockquote><p>由于CFT的CDN包含了中国IP段，需要备案才能使用，需要将其全部剔除，否则优选出来延迟最低的都是中国的CDN</p></blockquote><p><strong>下方为剔除中国CDN的IP段，官方可能会定期更新IP段，建议自己进行剔除操作</strong>更新日期：2022年7月29日</p><pre><code class="hljs plaintext">205.251.249.0/24204.246.168.0/2218.160.0.0/15205.251.252.0/2354.192.0.0/16204.246.173.0/2454.230.200.0/21116.129.226.128/26130.176.0.0/17108.156.0.0/1499.86.0.0/16205.251.200.0/2113.32.0.0/1513.224.0.0/1470.132.0.0/1815.158.0.0/1613.249.0.0/1618.238.0.0/1518.244.0.0/15205.251.208.0/2065.9.128.0/18130.176.128.0/1854.230.208.0/20116.129.226.0/2552.222.128.0/1718.164.0.0/1564.252.128.0/18205.251.254.0/2454.230.224.0/1971.152.0.0/17216.137.32.0/19204.246.172.0/2418.172.0.0/1518.154.0.0/1554.240.128.0/18205.251.250.0/2352.46.0.0/1852.82.128.0/1954.230.0.0/1754.230.128.0/1854.239.128.0/18130.176.224.0/2036.103.232.128/2652.84.0.0/15143.204.0.0/16144.220.0.0/1654.182.0.0/1654.239.192.0/1918.64.0.0/1499.84.0.0/16130.176.192.0/1952.124.128.0/17204.246.164.0/2213.35.0.0/16204.246.174.0/2336.103.232.0/25204.246.176.0/2065.8.0.0/1665.9.0.0/17108.138.0.0/1564.252.64.0/18</code></pre>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xray</title>
      <link href="/article/2022-12-19_Xray/"/>
      <url>/article/2022-12-19_Xray/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/xray.png" alt="Xray一键安装脚本"></p><h2 id="Xray一键脚本使用方法"><a href="#Xray一键脚本使用方法" class="headerlink" title="Xray一键脚本使用方法"></a>Xray一键脚本使用方法</h2><p><a href="https://v2xtls.org/tag/xray%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/">Xray一键脚</a>本使用步骤如下：</p><ol><li>准备一个境外服务器，想服务器速度快请参考 <a href="https://v2xtls.org/%e6%90%ac%e7%93%a6%e5%b7%a5vps%e8%b4%ad%e4%b9%b0%e6%95%99%e7%a8%8b/">搬瓦工VPS购买教程</a> 或从  <a href="https://v2xtls.org/cn2-gia-vps%e5%92%8c%e5%95%86%e5%ae%b6%e6%8e%a8%e8%8d%90/">CN2 GIA VPS商家推荐</a> 选购，想ip被封后免费换请参考：<a href="https://v2xtls.org/%e8%b4%ad%e4%b9%b0vultr%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%b6%85%e8%af%a6%e7%bb%86%e5%9b%be%e6%96%87%e6%95%99%e7%a8%8b/">购买vultr服务器超详细图文教程</a>。</li></ol><p>如果用VMESS+WS+TLS或者VLESS系列协议，则还需一个域名。对域名没有要求，国内&#x2F;国外注册的都可以，<strong>不需要备案</strong>，不会影响使用，也不会带来安全&#x2F;隐私上的问题。购买域名可参考：<a href="https://v2xtls.org/namesilo%e5%9f%9f%e5%90%8d%e6%b3%a8%e5%86%8c%e5%92%8c%e4%bd%bf%e7%94%a8%e6%95%99%e7%a8%8b/">Namesilo购买域名详细教程</a>。</p><p>值得一提的是本Xray一键脚本支持ipv6 only服务器，但是不建议用只有ipv6的VPS用来科学上网。</p><ol start="2"><li><p>如果vps运营商开启了防火墙（阿里云、Ucloud、腾讯云、AWS、GCP等商家默认有，搬瓦工&#x2F;hostdare&#x2F;vultr等商家默认关闭），请先登录vps管理后台放行80和443端口，否则可能会导致获取证书失败。此外，<strong>本脚本支持上传自定义证书</strong>，可跳过申请证书这一步，也可用在<a href="https://v2raytech.com/tag/nat-vps/">NAT VPS</a>上。</p></li><li><p>ssh连接到服务器。Windows系统请参考 <a href="https://v2xtls.org/bitvise%e8%bf%9e%e6%8e%a5linux%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%95%99%e7%a8%8b/">Bitvise连接Linux服务器教程</a>，mac用户请参考 <a href="https://v2xtls.org/mac%e7%94%b5%e8%84%91%e8%bf%9e%e6%8e%a5linux%e6%95%99%e7%a8%8b/">Mac电脑连接Linux教程</a>。</p></li><li><p>复制（或手动输入）下面命令到终端：</p></li></ol><pre><code class="hljs plaintext">bash &lt;(curl -sL https://raw.githubusercontent.com/daveleung/hijkpw-scripts-mod/main/xray_mod1.sh)</code></pre><p>按回车键，将出现如下操作菜单。如果菜单没出现，CentOS系统请输入 <code>yum install -y curl</code>，Ubuntu&#x2F;Debian系统请输入 <code>sudo apt install -y curl</code>，然后再次运行上面的命令：</p><p>Xray一键安装脚本</p><p>本Xray一键脚本目前支持以下组合方式：</p><ul><li><strong>VMESS</strong>，即最普通的V2ray服务器，没有伪装，也不是VLESS</li><li><strong>VMESS</strong>+KCP，传输协议使用mKCP，VPS线路不好时可能有奇效</li><li><strong>VMESS</strong>+TCP+TLS，带伪装的V2ray，不能过<a href="https://v2xtls.org/v2ray%e4%bd%bf%e7%94%a8cloudflare%e4%b8%ad%e8%bd%ac%e6%b5%81%e9%87%8f%ef%bc%8c%e6%8b%af%e6%95%91%e8%a2%ab%e5%a2%99ip/">CDN中转</a></li><li><strong>VMESS</strong>+WS+TLS，即最通用的V2ray伪装方式，能过<a href="https://v2xtls.org/v2ray%e4%bd%bf%e7%94%a8cloudflare%e4%b8%ad%e8%bd%ac%e6%b5%81%e9%87%8f%ef%bc%8c%e6%8b%af%e6%95%91%e8%a2%ab%e5%a2%99ip/">CDN中转</a>，推荐使用</li><li><strong>VLESS</strong>+KCP，传输协议使用mKCP</li><li><strong>VLESS</strong>+TCP+TLS，通用的VLESS版本，不能过<a href="https://v2xtls.org/v2ray%e4%bd%bf%e7%94%a8cloudflare%e4%b8%ad%e8%bd%ac%e6%b5%81%e9%87%8f%ef%bc%8c%e6%8b%af%e6%95%91%e8%a2%ab%e5%a2%99ip/">CDN中转</a>，但比VMESS+TCP+TLS方式性能更好</li><li><strong>VLESS</strong>+WS+TLS，基于websocket的V2ray伪装VLESS版本，能过<a href="https://v2xtls.org/v2ray%e4%bd%bf%e7%94%a8cloudflare%e4%b8%ad%e8%bd%ac%e6%b5%81%e9%87%8f%ef%bc%8c%e6%8b%af%e6%95%91%e8%a2%ab%e5%a2%99ip/">CDN中转</a>，有过CDN情况下推荐使用</li><li><strong>VLESS</strong>+TCP+XTLS，目前最强悍的VLESS+XTLS组合，强力推荐使用（但是支持的客户端少一些）</li><li><strong>trojan</strong>，轻量级的伪装协议</li><li><strong>trojan</strong>+XTLS，trojan加强版，使用XTLS技术提升性能</li></ul><blockquote><p>注意：目前一些客户端不支持VLESS协议，或者不支持XTLS，请按照自己的情况选择组合</p></blockquote><ol><li>按照自己的需求选择一个方式。例如6，然后回车。接着脚本会让你输入一些信息，也可以直接按回车使用默认值。需要注意的是，对于要输入伪装域名的情况，<strong>如果服务器上有网站在运行</strong>，请联系运维再执行脚本，否则可能导致原来网站无法访问！</li></ol><p><a href="https://v2xtls.org/wp-content/uploads/2020/12/xray%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%BE%93%E5%85%A5-1024x792-1.jpg"><img src="https://v2xtls.org/wp-content/uploads/2020/12/xray%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%BE%93%E5%85%A5-1024x792-1.jpg" alt="xray一键脚本输入"></a></p><p>xray一键脚本输入</p><ol start="6"><li>脚本接下来会自动运行，一切顺利的话结束后会输出配置信息：</li></ol><p><a href="https://v2xtls.org/wp-content/uploads/2020/12/Xray%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF.jpg"><img src="https://v2xtls.org/wp-content/uploads/2020/12/Xray%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF.jpg" alt="Xray一键脚本运行成功输出信息"></a></p><p>Xray一键脚本运行成功输出信息</p><p><strong>到此服务端配置完毕</strong>，服务器可能会自动重启（<strong>没提示重启则不需要</strong>），windows终端出现“disconnected”，mac出现“closed by remote host”说明服务器成功重启了。</p><p>对于VLESS协议、VMESS+WS+TLS的组合，网页上输入伪装域名，<strong>能正常打开伪装站</strong>，说明服务端已经正确配置好。如果运行过程中出现问题，请在本页面下方查找解决方法或留言。</p><h2 id="Xray一键脚本其他事项"><a href="#Xray一键脚本其他事项" class="headerlink" title="Xray一键脚本其他事项"></a>Xray一键脚本其他事项</h2><p>服务端配置好后，如果想使用CloudFlare等CDN中转（必须是WS版才可以），请参考：<a href="https://v2xtls.org/v2ray%e4%bd%bf%e7%94%a8cloudflare%e4%b8%ad%e8%bd%ac%e6%b5%81%e9%87%8f%ef%bc%8c%e6%8b%af%e6%95%91%e8%a2%ab%e5%a2%99ip/">使用cloudflare中转流量，拯救被墙ip</a>。</p><p>本脚本默认使用的加速技术是BBR，换成魔改BBR&#x2F;BBR Plus&#x2F;锐速清参考：<a href="https://v2xtls.org/%e5%ae%89%e8%a3%85%e9%ad%94%e6%94%b9bbr-bbr-plus-%e9%94%90%e9%80%9flotserver/">安装魔改BBR&#x2F;BBR</a> <a href="https://v2xtls.org/%e5%ae%89%e8%a3%85%e9%ad%94%e6%94%b9bbr-bbr-plus-%e9%94%90%e9%80%9flotserver/">Plus&#x2F;锐速(</a><a href="https://v2xtls.org/%e5%ae%89%e8%a3%85%e9%ad%94%e6%94%b9bbr-bbr-plus-%e9%94%90%e9%80%9flotserver/">Lotserver)</a>。</p><p>如果伪装站类型没有你满意的，比如你想搭建WordPress博客，请参考：<a href="https://v2xtls.org/v2ray%e4%bc%aa%e8%a3%85%e5%bb%ba%e7%ab%99%e6%95%99%e7%a8%8b/">V2ray伪装建站教程</a>。</p><p>对于使用TLS的方式，脚本默认会申请域名证书，证书存放在和xray配置文件同一个文件夹内（即<code>/usr/local/etc/xray</code>目录下）。证书会自动更新，如果客户端突然无法使用，请打开伪装网站查看是否能正常打开。如果证书已过期，请再次运行上面的脚本重新配置。</p><p>最后，刚搭建好Xray后不要猛上流量，否则会导致被限速、端口被墙，严重可能导致ip被墙。</p><p>接下来是配置客户端，下载客户端和配置教程请参考：</p><ul><li><a href="https://v2xtls.org/v2ray-windows%e5%ae%a2%e6%88%b7%e7%ab%af%e4%b8%8b%e8%bd%bd/">V2ray Windows客户端下载</a></li><li><a href="https://v2xtls.org/v2ray%e5%ae%89%e5%8d%93%e5%ae%a2%e6%88%b7%e7%ab%af%e4%b8%8b%e8%bd%bd/">V2ray 安卓客户端下载</a></li><li><a href="https://v2xtls.org/v2ray-mac%e5%ae%a2%e6%88%b7%e7%ab%af%e4%b8%8b%e8%bd%bd/">V2ray Mac客户端下载</a></li><li><a href="https://v2xtls.org/v2ray-ios%e5%ae%a2%e6%88%b7%e7%ab%af%e4%b8%8b%e8%bd%bd/">V2ray苹果客户端下载</a></li></ul><p>祝大家使用愉快。如有问题请在页面下方留言，也欢迎到 <a href="https://hijk.club/">网络跳越论坛</a> 或 tg群组<a href="https://t.me/hijkclub">https://t.me/hijkclub</a> 交流，或关注Youtube频道：<a href="https://youtube.com/channel/UCYTB--VsObzepVJtc9yvUxQ">网络跳越</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> 一键脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPtables 利用iptables设置端口转发的shell脚本</title>
      <link href="/article/2022-12-19_IPtables/"/>
      <url>/article/2022-12-19_IPtables/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/iptables.png"></p><h1 id="利用iptables设置端口转发的shell脚本"><a href="#利用iptables设置端口转发的shell脚本" class="headerlink" title="利用iptables设置端口转发的shell脚本"></a>利用iptables设置端口转发的shell脚本</h1><p>项目作用<br>便捷地设置iptables流量转发规则<br>当域名解析的地址发生变化时，自动更新流量转发规则，不需要手动变更（适用于ddns域名）<br>用法<br>如果vps不能访问 raw.githubusercontent.com 推荐使用这个</p><pre><code class="hljs plaintext">wget --no-check-certificate -qO natcfg.sh https://www.arloor.com/sh/iptablesUtils/natcfg.sh &amp;&amp; bash natcfg.sh或wget --no-check-certificate -qO natcfg.sh https://raw.githubusercontent.com/arloor/iptablesUtils/master/natcfg.sh &amp;&amp; bash natcfg.sh</code></pre><p>输出如下：</p><pre><code class="hljs plaintext">############################################################## Usage: setup iptables nat rules for domian/ip             ## Website:  http://www.arloor.com/                          ## Author: ARLOOR &lt;admin@arloor.com&gt;                         ## Github: https://github.com/arloor/iptablesUtils           ##############################################################你要做什么呢（请输入数字）？Ctrl+C 退出本脚本1) 增加转发规则          3) 列出所有转发规则2) 删除转发规则          4) 查看当前iptables配置#?</code></pre><p>此时按照需要，输入1-4中的任意数字，然后按照提示即可</p><p>卸载</p><pre><code class="hljs plaintext">wget --no-check-certificate -qO uninstall.sh https://raw.githubusercontent.com/arloor/iptablesUtils/master/dnat-uninstall.sh &amp;&amp; bash uninstall.sh</code></pre><p>查看日志<br>journalctl -exu dnat<br>配置文件备份和导入导出<br>配置文件在</p><p>&#x2F;etc&#x2F;dnat&#x2F;conf<br>trojan转发<br>总是有人说，不能转发trojan，这么说的人大部分是证书配置不对。最简单的解决方案是：客户端选择不验证证书。复杂一点是自己把证书和中转机的域名搭配好。</p><p>小白记住一句话就好：客户端不验证证书。</p><p>推荐新项目——使用nftables实现nat转发<br>iptables的后继者nftables已经在debain和centos最新的操作系统中作为生产工具提供，nftables提供了很多新的特性，解决了iptables很多痛点。</p><p>因此创建了一个新的项目&#x2F;arloor&#x2F;nftables-nat-rust。该项目使用nftables作为nat转发实现，相比本项目具有如下优点：</p><p>支持端口段转发<br>转发规则使用配置文件，可以进行备份以及导入<br>更加现代<br>所以强烈推荐使用&#x2F;arloor&#x2F;nftables-nat-rust。不用担心，本项目依然可以正常稳定使用。</p><p>PS: 新旧两个项目并不兼容，切换到新项目时，请先卸载此项目</p><p>电报交流群<br><a href="https://t.me/popstary">https://t.me/popstary</a></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenWrt</title>
      <link href="/article/2022-12-4_WKY/"/>
      <url>/article/2022-12-4_WKY/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/wky.png"></p><h1 id="玩客云刷机armbian变身openwrt旁路由教程＆性能测试"><a href="#玩客云刷机armbian变身openwrt旁路由教程＆性能测试" class="headerlink" title="玩客云刷机armbian变身openwrt旁路由教程＆性能测试"></a>玩客云刷机armbian变身openwrt旁路由教程＆性能测试</h1><p><img src="https://img.senxi.xyz/imgs/2022/12/32913c1cea2dd078.png"></p><p>玩客云是17年的一款矿渣产品，我当时入手价499可以挖矿换话费和备份手机照片、使用迅雷高速下载，阿里云盘出来后不限速，也没有下载需求了，吃灰良久。</p><p>最近折腾了玩客云刷机OpenWrt作为旁路由的方案，分享给大家，有需要的朋友折腾。</p><p><strong>「玩客云硬件参数：」</strong></p><ul><li><p>CPU是晶晨S805 ，4核心 1.5GHZ</p></li><li><p>双USB2.0</p></li><li><p>千兆单网口</p></li><li><p>1GB内存+8GB存储</p></li></ul><p>这个配置平平无奇，主要的硬伤是cpu32位的，usb2.0传输速度只有20M&#x2F;秒左右，下载速度跑不满千兆带宽，好的地方是千兆网口。</p><p><strong>「刷机准备工具：」</strong></p><ol><li><p>WIN10电脑一台</p></li><li><p>双公头USB线一根</p></li><li><p>矿渣玩客云</p></li><li><p>螺丝刀、吹风机</p></li></ol><h3 id="玩客云刷机openwrt两种方法："><a href="#玩客云刷机openwrt两种方法：" class="headerlink" title="玩客云刷机openwrt两种方法："></a>玩客云刷机openwrt两种方法：</h3><p><strong>「方法一」</strong>直刷openwrt 这个网上资源只有一个，snail 大神制作的固件，固件没插件，需要自己安装。</p><p><strong>「方法二」</strong>刷armbian安装docker在安装openwrt，这个有比较多的适合固件，openwrt版本新，插件多，本次选这个方案。</p><h3 id="刷机资源分享"><a href="#刷机资源分享" class="headerlink" title="刷机资源分享"></a>刷机资源分享</h3><p>刷机固件、软件，使用阿里云分享，不限速，需要转存后下载，然后解压！</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d71c4ba104.png"></p><h4 id="玩客云openwrt刷机包："><a href="#玩客云openwrt刷机包：" class="headerlink" title="玩客云openwrt刷机包："></a>玩客云openwrt刷机包：</h4><blockquote><p>❝</p><p><a href="https://www.aliyundrive.com/s/ZM3oScBDcck**%E3%80%8C%E6%8F%90%E5%8F%96%E7%A0%81">https://www.aliyundrive.com/s/ZM3oScBDcck**「提取码</a>: y75j」**</p><p>❞</p></blockquote><h3 id="第一步：刷入底包-update"><a href="#第一步：刷入底包-update" class="headerlink" title="第一步：刷入底包 update"></a>第一步：刷入底包 update</h3><p><img src="http://img.senxi.xyz/i/2022/10/05/633d385dacd7a.png"></p><p>WIN10打开烧录软件，选择update镜像，点开始。</p><p>关键步骤，先短接触点，再接通玩客云主板电源。需要说明的是，玩客云有两种版本，它们的短接位置也是不一样的。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633cf77c3e418.png"></p><p>我的是老主板，上图短接位置，图片来源：@Powersee大神</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633cf81ec5862.png"></p><p>这个是新版（也就是玩客云主板上标注的有v1.3的主板），短接点是在正面。</p><p>拆机后、usb插入玩客云<strong>「靠近HDMI的接口」</strong>、另一头接入电脑usb、短接焊点、通电。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d3af398e4d.png"></p><p>正常情况，会出现上图的一个线程，开始写入。如果有错误，换一个usb接口，多试几次。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d3b8b4702d.png"></p><p>这个固件很小，很快就会写完，一般几秒钟，提示烧录成功后，先点”停止“，然后关闭，拔掉电源、拔掉USB。</p><h3 id="第二步：玩客云刷入armbian5-9系统"><a href="#第二步：玩客云刷入armbian5-9系统" class="headerlink" title="第二步：玩客云刷入armbian5.9系统"></a>第二步：玩客云刷入armbian5.9系统</h3><p>这一步分为好几个部分：</p><ol><li><p>U盘写入armbian5.88系统</p></li><li><p>armbian5.88写入玩客云EMMC</p></li><li><p>U盘写入armbian5.9系统</p></li><li><p>U盘启armbian5.9系统ssh登陆写入EMMC</p></li></ol><p><img src="http://img.senxi.xyz/i/2022/10/05/633d3cfdb2c9d.png"></p><p>打开写入U盘镜像软件，选择镜像，确认U盘名称，点flash开始写入。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d3d65990e0.png"></p><p>等待几分钟，写入速度和U盘传输速度有关，一般是几分钟，提示成功后，关闭软件，拔出U盘。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d3ece9181a.png"></p><p>把U盘插入玩客云靠近网口的USB，然后通电，指示灯会蓝色→绿色→蓝紫闪烁→蓝色，证明刷机成功，过程好几分钟，多等下。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d40ded1121.png"></p><p>打开写入软件，选armbian5.9的镜像，写入U盘，过程比前面快一点，这个镜像小一些，同样步骤操作。</p><p>armbian5.9系统写入完成后，把U盘插入玩客云靠近网口的USB，用网线接入路由器LAN口，通电开机。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d5af6e7eea.png"></p><p>过一会打开路由器后台，找到”aml-s812“的设备IP地址，复制。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d5be67081d.png"></p><p>WIN10电脑打开putty软件，其他ssh工具也可以，填入上面的IP地址</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d5d5a18ac3.png"></p><p>登陆，用户名：root  默认密码：1234</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d5e6b9bb66.png"></p><p>进入目录 <code>cd /boot/install</code> ，写入emmc命令，等待写入完成，耗时几分钟。</p><p>刷入 emmc命令：</p><p>cd &#x2F;boot&#x2F;install  sudo .&#x2F;install.sh</p><p>完成后，拔电源，拔掉U盘，终于ARMBIAN系统刷机完成。</p><h3 id="第三步：docker环境搭建"><a href="#第三步：docker环境搭建" class="headerlink" title="第三步：docker环境搭建"></a>第三步：docker环境搭建</h3><p>国内网络连接不稳定，需要更换软件源，然后更新系统，之后才能安装docker。</p><p><strong>「换Debian源」</strong></p><p><code>mv /etc/apt/sources.list /etc/apt/sources.list.bk   nano /etc/apt/sources.list   </code></p><p>进入编辑器后，粘贴下面代码</p><p><code>deb https://mirrors.ustc.edu.cn/debian/ bullseye main non-free contrib   deb-src https://mirrors.ustc.edu.cn/debian/ bullseye main non-free contrib   deb https://mirrors.ustc.edu.cn/debian-security/ bullseye-security main   deb-src https://mirrors.ustc.edu.cn/debian-security/ bullseye-security main   deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main non-free contrib   deb-src https://mirrors.ustc.edu.cn/debian/ bullseye-updates main non-free contrib   deb https://mirrors.ustc.edu.cn/debian/ bullseye-backports main non-free contrib   deb-src https://mirrors.ustc.edu.cn/debian/ bullseye-backports main non-free contrib   </code></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d62359f905.png"></p><p>然后保存，退出。</p><p><strong>「更新软件」</strong></p><p><code>apt-get update &amp;&amp; apt-get upgrade</code></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d649e79d7c.png"></p><p>选择有Y就选Y，有默认的情况就选N</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d652203b88.png"></p><p>这里选择 NO</p><p><strong>「安装docker」</strong></p><p><code>apt install docker.io</code></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d662e1aeb5.png"></p><p>等待代码跑完后，docker -v 查看下版本，证明安装成功！</p><h3 id="安装OpenWrt"><a href="#安装OpenWrt" class="headerlink" title="安装OpenWrt"></a>安装OpenWrt</h3><p>镜像一：<a href="https://www.right.com.cn/forum/thread-8024126-1-1.html">https://www.right.com.cn/forum/thread-8024126-1-1.html</a></p><p>镜像二：<a href="https://hub.docker.com/r/xuanaimai/onecloud">https://hub.docker.com/r/xuanaimai/onecloud</a></p><p>本次安装的是镜像一，比较精简，功能够用；镜像二功能很全，根据自己需要选择。</p><p><strong>「打开网卡混杂模式」</strong></p><p>ip link set eth0 promisc on</p><p><strong>「创建网络」</strong></p><p>docker network create -d macvlan –subnet&#x3D;192.168.100.0&#x2F;24 –gateway&#x3D;192.168.100.1 -o parent&#x3D;eth0 macnet</p><p>自己根据 玩客云 所在网段修改，如：玩客云IP:192.168.1.175，则192.168.0.0&#x2F;24 改成 192.168.1.0&#x2F;24，192.168.0.1改成主路由地址</p><p><strong>「拉取镜像」</strong></p><p>docker pull jyhking&#x2F;onecloud:1.1docker run -itd –name&#x3D;OneCloud –restart&#x3D;always –network&#x3D;macnet –privileged&#x3D;true jyhking&#x2F;onecloud:1.1 &#x2F;sbin&#x2F;init</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d698e6cd3c.png"></p><p>openwrt镜像运行成功，然后打开路由器后台，找到openwrt地址。</p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d6aececc72.png"></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d6b91b4951.png"></p><p><strong>「用户名：root  密码： password」</strong></p><p><strong>「玩客云旁路由设置：」</strong></p><ul><li><p>LAN口固定IP地址，网关指向主路由IP地址</p></li><li><p>关闭DHCP服务器</p></li><li><p>关闭IPV6</p></li><li><p>防火墙自定义规则添加下面代码<code>iptables -t nat -I POSTROUTING eth0 -j MASQUERADE</code></p></li></ul><h3 id="玩客云旁路由性能测试"><a href="#玩客云旁路由性能测试" class="headerlink" title="玩客云旁路由性能测试"></a>玩客云旁路由性能测试</h3><p><strong>「1、iperf3内网测速」</strong></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d6cb467610.png"></p><p>基本上在930Mbps上下，证明网口是千兆的，基本跑满了。</p><p><strong>「2、油管4K视频跑分测试」</strong></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d6d8e99755.png"></p><p>稳定在5万多分，功耗1瓦多，CPU占用率在 40% 左右。</p><p><strong>「3、fast网速测试」</strong></p><p><img src="http://img.senxi.xyz/i/2022/10/05/633d6e1ce2667.png"></p><p>测了好几次，最低65Mbps，最高84Mbps，看4K视频完全够用了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>价格低廉，40多块钱就能入手，千兆网口，可当旁路由使用，能满足100M带宽的科学上网，功耗极低，适合喜欢折腾的朋友。</p>]]></content>
      
      
      <categories>
          
          <category> 软路由 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10个免费在线追剧，看电影的网站，免费白嫖就是爽 免费追剧，看电影网站</title>
      <link href="/article/2022-7-23_10_video/"/>
      <url>/article/2022-7-23_10_video/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/10video.png"></p><h1 id="10个免费在线追剧，看电影的网站，免费白嫖就是爽"><a href="#10个免费在线追剧，看电影的网站，免费白嫖就是爽" class="headerlink" title="10个免费在线追剧，看电影的网站，免费白嫖就是爽"></a>10个免费在线追剧，看电影的网站，免费白嫖就是爽</h1><h3 id="1-苹果CMS-https-mac-wenzhi-cf"><a href="#1-苹果CMS-https-mac-wenzhi-cf" class="headerlink" title="1. 苹果CMS https://mac.wenzhi.cf/"></a>1. 苹果CMS <a href="https://mac.wenzhi.cf/">https://mac.wenzhi.cf/</a></h3><ul><li>自建的一个免费追剧网站每天定时更新，可反馈追加新的剧集</li></ul><h3 id="2-泥巴影院-https-www-nivod-tv"><a href="#2-泥巴影院-https-www-nivod-tv" class="headerlink" title="2. 泥巴影院 https://www.nivod.tv/"></a>2. 泥巴影院 <a href="https://www.nivod.tv/">https://www.nivod.tv/</a></h3><ul><li>这个网站资源更新非常及时所有热门是电视综艺都有，很适合大家追剧使用有电视TV端和APP的应用，没有任何广告，界面也很美观，是最推荐的一款还有午夜版内容</li></ul><h3 id="3-吼吼HOHO-http-hoho-tv"><a href="#3-吼吼HOHO-http-hoho-tv" class="headerlink" title="3. 吼吼HOHO http://hoho.tv"></a>3. 吼吼HOHO <a href="http://hoho.tv/">http://hoho.tv</a></h3><ul><li>这个网站追剧非常方便速度非常快，高清界面非常美观，而且支持弹幕，热门电视剧更新非常及时</li></ul><h3 id="4-凌云影视-https-www-lingyun-in"><a href="#4-凌云影视-https-www-lingyun-in" class="headerlink" title="4. 凌云影视 https://www.lingyun.in/"></a>4. 凌云影视 <a href="https://www.lingyun.in/">https://www.lingyun.in/</a></h3><ul><li>这有非常都影院的大片资源，并且还附带有磁力链接可以下载好后找时间慢慢看当然这个也是支持在线观看的并且有4K片源线路也非常齐全</li></ul><h3 id="5-低端影院-https-ddys-art"><a href="#5-低端影院-https-ddys-art" class="headerlink" title="5. 低端影院 https://ddys.art/"></a>5. 低端影院 <a href="https://ddys.art/">https://ddys.art/</a></h3><p> -这个网站主打的是海外热门电影，网站有国内和海外两种节点，片源也是由他们自己压制的质量非常高，因为可以选择国内节点速度也是非常快</p><h3 id="6-80s手机电影-https-80s-tw"><a href="#6-80s手机电影-https-80s-tw" class="headerlink" title="6. 80s手机电影 https://80s.tw/"></a>6. 80s手机电影 <a href="https://80s.tw/">https://80s.tw/</a></h3><ul><li>这网站资源非常齐全，电影电视剧动漫都有更新，并且还有电影电视剧的各自榜单不知道看啥的时候可以随便点击都是非常优秀的作品</li></ul><h3 id="7-独库播-https-www-duboku-tv"><a href="#7-独库播-https-www-duboku-tv" class="headerlink" title="7. 独库播 https://www.duboku.tv/"></a>7. 独库播 <a href="https://www.duboku.tv/">https://www.duboku.tv/</a></h3><p> -这个网站视频更新非常快，很稳定，有些热门资源都是比别的网站更新更加及时的但是只支持电视剧和综艺港剧动漫的观看，没有电影资源比较可惜，但是对于追剧的小伙伴非常推荐</p><h3 id="8-茶杯狐-https-www-cupfox-app"><a href="#8-茶杯狐-https-www-cupfox-app" class="headerlink" title="8. 茶杯狐 https://www.cupfox.app/"></a>8. 茶杯狐 <a href="https://www.cupfox.app/">https://www.cupfox.app/</a></h3><ul><li>对于想看奈飞的小伙伴来说非常好用，视频质量非常高，而且热门的院线大片电影都有更新，节点也非常多对于要看国外电影的人来说非常推荐</li></ul><h3 id="9-APP影院-https-www-appmovie-cc"><a href="#9-APP影院-https-www-appmovie-cc" class="headerlink" title="9. APP影院 https://www.appmovie.cc/"></a>9. APP影院 <a href="https://www.appmovie.cc/">https://www.appmovie.cc/</a></h3><ul><li>这个有非常多齐全的的美国热门大片，并且也有电影电视剧的动漫的资源，对于想看最新的电影电视的来说非常好用，线路也非常多，并且也提供高清4K的资源供你下载</li></ul><h3 id="10-欧乐影院-https-www-olevod-com"><a href="#10-欧乐影院-https-www-olevod-com" class="headerlink" title="10. 欧乐影院 https://www.olevod.com/"></a>10. 欧乐影院 <a href="https://www.olevod.com/">https://www.olevod.com/</a></h3><ul><li>这个网站也有午夜版，电影资源也非常丰富，速度很快</li></ul><h3 id="11-Grab4K-https-www-grab4k-cn"><a href="#11-Grab4K-https-www-grab4k-cn" class="headerlink" title="11. Grab4K https://www.grab4k.cn/"></a>11. Grab4K <a href="https://www.grab4k.cn/">https://www.grab4k.cn/</a></h3><ul><li>4K篮版高清电影</li></ul>]]></content>
      
      
      <categories>
          
          <category> 热门文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion</title>
      <link href="/article/2022-7-12_notion/"/>
      <url>/article/2022-7-12_notion/</url>
      
        <content type="html"><![CDATA[<h1 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a>Notion</h1><p><img src="https://wangwenzhi.eu.org/images/images/wangwenzhi.jpeg"><br><a href="https://www.notion.so/wenzhi/WangWenzhi-401205ddcd584ff483b7df2e1e8151fd">WANGWENZHI-Notion</a></p><p><strong>Notion</strong>是一款集成了<a href="https://zh.wikipedia.org/wiki/%E7%AC%94%E8%AE%B0" title="笔记">笔记</a>、<a href="https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%BA%93" title="知识库">知识库</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC&action=edit&redlink=1" title="数据表格（页面不存在）">数据表格</a>、<a href="https://zh.wikipedia.org/wiki/%E7%9C%8B%E6%9D%BF" title="看板">看板</a>、<a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E5%8E%86" title="日历">日历</a>等多种能力于一体的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" title="应用程序">应用程序</a>，它支持个人用户单独使用，也可以与他人进行跨平台协作。Notion由<a href="https://zh.wikipedia.org/w/index.php?title=Ivan_Zhao&action=edit&redlink=1" title="Ivan Zhao（页面不存在）">Ivan Zhao</a>、<a href="https://zh.wikipedia.org/w/index.php?title=Simon_Last&action=edit&redlink=1" title="Simon Last（页面不存在）">Simon Last</a>于2016年（也有说2013年，独立由Simon Last）在<a href="https://zh.wikipedia.org/wiki/%E6%97%A7%E9%87%91%E5%B1%B1" title="旧金山">旧金山</a>创立的。截至2021年10月，Notion估值103亿美元，在全球拥有超2000万用户，团队规模为180人左右。<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-:0-2">[2]</a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E5%8E%86%E5%8F%B2%E4%B8%8E%E5%8F%91%E5%B1%95">1历史与发展</a></li><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D">2功能介绍</a><ul><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E8%A1%A8%E8%BE%BE%E8%83%BD%E5%8A%9B">2.1表达能力</a></li><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E5%9B%A2%E9%98%9F%E5%8D%8F%E5%90%8C">2.2团队协同</a></li><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0">2.3开放平台</a></li></ul></li><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E8%9E%8D%E8%B5%84%E8%BF%87%E7%A8%8B">3融资过程</a></li><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E5%8F%82%E8%80%83%E6%9D%A5%E6%BA%90">4参考来源</a></li><li><a href="https://zh.wikipedia.org/zh-cn/Notion#%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5">5外部链接</a></li></ul><h2 id="历史与发展-编辑"><a href="#历史与发展-编辑" class="headerlink" title="历史与发展[编辑]"></a>历史与发展[<a href="https://zh.wikipedia.org/w/index.php?title=Notion&action=edit&section=1" title="编辑章节：历史与发展">编辑</a>]</h2><p>Notion是由Notion Labs Inc开发的一款应用程序，Notion Labs Inc由Ivan Zhao、Simon Last于2016年在<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD" title="美国">美国</a><a href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%88%A9%E4%BA%9E%E5%B7%9E" title="加利福利亚州">加利福利亚州</a><a href="https://zh.wikipedia.org/wiki/%E6%97%A7%E9%87%91%E5%B1%B1%E5%B8%82" title="旧金山市">旧金山市</a>创立<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-3">[3]</a>。也有说Notion公司最初是由Simon Last在2013年创建的，后期Ivan Zhao才加入的<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-4">[4]</a>。</p><p>Ivan Zhao称“notion项目最初的构想是，做一个代码制作应用”，但是很快项目失败了。Ivan与Simon决定前往<a href="https://zh.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC" title="日本">日本</a><a href="https://zh.wikipedia.org/wiki/%E4%BA%AC%E9%83%BD" title="京都">京都</a>，他们在京都待了一年左右，在相对无压力和与世隔绝的环境下，重新思考下一代工具的设计，也正是在这里，Notion的雏形被构思出来了<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-5">[5]</a>。日本文化的设计也体现在了Notion的产品设计中，比如默认封面背景，就有大量日本<a href="https://zh.wikipedia.org/wiki/%E6%B5%AE%E4%B8%96%E7%BB%98" title="浮世绘">浮世绘</a>的图片。之后，Ivan与Simon回到旧金山，开始集中开发Notion，并与2016年3月，在<a href="https://zh.wikipedia.org/wiki/Product_Hunt" title="Product Hunt">Product Hunt</a>上正式发布了Notion 1.0，包含了Web与苹果Mac端两个版本<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-6">[6]</a>，并获得了Product Hunt评选的2016年Golden Kitty奖（全年最佳APP评选奖项）。</p><p>2017年6月，支持iOS客户端</p><p>2018年3月，正式发布2.0产品，正式集成了表格、看板、日历的能力</p><p>2018年6月，支持Android客户端</p><p>2020年4月，支持iPad客户端</p><p>2020年7月，发布韩语版本</p><p>2021年9月，收购自动化处理平台Automate.io，为开放平台和开发者提供更强大的开发能力于体验<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-7">[7]</a></p><p>2021年10月，发布日语版本，并宣布正式进军日本市场</p><p>2022年2月，发布法语Beta版本</p><h2 id="功能介绍-编辑"><a href="#功能介绍-编辑" class="headerlink" title="功能介绍[编辑]"></a>功能介绍[<a href="https://zh.wikipedia.org/w/index.php?title=Notion&action=edit&section=2" title="编辑章节：功能介绍">编辑</a>]</h2><p>Notion产品演变至今，已经发展成一个拥有众多功能功能的复杂产品。他为大型企业<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-8">[8]</a>、小型创业公司<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-9">[9]</a>与个人<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-10">[10]</a>，都提供了标准解决方案，同时还重点面向创业公司、<a href="https://zh.wikipedia.org/w/index.php?title=%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC&action=edit&redlink=1" title="远程办公（页面不存在）">远程办公</a>、教育行业与<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E8%90%A5%E5%88%A9%E7%BB%84%E7%BB%87" title="非营利组织">非营利组织</a>进行了产品优化。<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-11">[11]</a>Notion在笔记的表达能力、团队协同、创作者生态上，做出了差异化的产品体验。</p><h3 id="表达能力-编辑"><a href="#表达能力-编辑" class="headerlink" title="表达能力[编辑]"></a>表达能力[<a href="https://zh.wikipedia.org/w/index.php?title=Notion&action=edit&section=3" title="编辑章节：表达能力">编辑</a>]</h3><p>Notion支持非常丰富的表达能力，不仅支持文本、图片、音视频、附件等，用户还能将整个数据表格插入其中，也支持了与<a href="https://zh.wikipedia.org/wiki/Figma" title="Figma">Figma</a>、<a href="https://zh.wikipedia.org/wiki/Github" title="Github">Github</a>、<a href="https://zh.wikipedia.org/wiki/YouTube" title="YouTube">YouTube</a>等平台内容的内嵌。这些内容，在Notion灵活的页面上，都可以按照“块”的方式，进行重新组织，Notion将这些块称之为Block。在免费“块”的额度用完之后，用户可以根据需求，购买新增的“块”，这也是Notion的主要商业化模式。</p><h3 id="团队协同-编辑"><a href="#团队协同-编辑" class="headerlink" title="团队协同[编辑]"></a>团队协同[<a href="https://zh.wikipedia.org/w/index.php?title=Notion&action=edit&section=4" title="编辑章节：团队协同">编辑</a>]</h3><p>Notion支持强大的协同能力，在为小型团队与公司提供的付费版本中，支持无上限的协同人数。</p><h3 id="开放平台-编辑"><a href="#开放平台-编辑" class="headerlink" title="开放平台[编辑]"></a>开放平台[<a href="https://zh.wikipedia.org/w/index.php?title=Notion&action=edit&section=5" title="编辑章节：开放平台">编辑</a>]</h3><p>Notion提供了完善了的产品<a href="https://zh.wikipedia.org/w/index.php?title=API%E6%8E%A5%E5%8F%A3&action=edit&redlink=1" title="API接口（页面不存在）">API接口</a><a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-12">[12]</a>，这些接口可以帮助有开发能力的个人或团队，完成一些自定义场景的需求。在超过50个国家和地区，Notion组织了创作者社区<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-13">[13]</a>。</p><h2 id="融资过程-编辑"><a href="#融资过程-编辑" class="headerlink" title="融资过程[编辑]"></a>融资过程[<a href="https://zh.wikipedia.org/w/index.php?title=Notion&action=edit&section=6" title="编辑章节：融资过程">编辑</a>]</h2><p>融资时间</p><p>融资金额</p><p>投资方</p><p>估值金额</p><p>2017年1月<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-14">[14]</a></p><p>未公开</p><p>Third Kind Venture Capital、Sherpalo Ventures、<a href="https://zh.wikipedia.org/w/index.php?title=Sequoia_Capital%EF%BC%88%E7%BA%A2%E6%9D%89%E8%B5%84%E6%9C%AC%EF%BC%89&action=edit&redlink=1" title="Sequoia Capital（红杉资本）（页面不存在）">Sequoia Capital（红杉资本）</a>、First Round Capital、Felicis Ventures（费利西斯风险投资公司）、Thibaud Elziere、Terrance Rohan、Naval Ravikant、Matt MacInnis和Elad Gil. 。</p><p>未公开</p><p>2019年7月</p><p>1000万 美元</p><p>Aydin Senkut、Daniel Gross、Elad Gil、Josh Kopelman、Lachy Groom 和 Ram Shriram</p><p>2019 年 7 月</p><p>1820万美元</p><p>A.Capital Ventures、Aydin Senkut、Daniel Gross、Elad Gil、Josh Kopelman、Lachy Groom 和 Ram Shriram</p><p>2020年4月<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-15">[15]</a></p><p>5000万美元</p><p><a href="https://zh.wikipedia.org/w/index.php?title=Index_Ventures%EF%BC%88%E6%8C%87%E6%95%B0%E9%A3%8E%E9%99%A9%E6%8A%95%E8%B5%84%E5%85%AC%E5%8F%B8%EF%BC%89&action=edit&redlink=1" title="Index Ventures（指数风险投资公司）（页面不存在）">Index Ventures（指数风险投资公司）</a></p><p>20 亿美元</p><p>2021年10月<a href="https://zh.wikipedia.org/zh-cn/Notion#cite_note-:0-2">[2]</a></p><p>2.5亿</p><p><a href="https://zh.wikipedia.org/w/index.php?title=CoatueManagement%EF%BC%88%E8%94%BB%E5%9B%BE%E8%B5%84%E6%9C%AC%EF%BC%89&action=edit&redlink=1" title="CoatueManagement（蔻图资本）（页面不存在）">CoatueManagement（蔻图资本）</a>及<a href="https://zh.wikipedia.org/w/index.php?title=Sequoia_Capital%EF%BC%88%E7%BA%A2%E6%9D%89%E8%B5%84%E6%9C%AC%EF%BC%89&action=edit&redlink=1" title="Sequoia Capital（红杉资本）（页面不存在）">Sequoia Capital（红杉资本）</a>领投，Base10 Partners等机构跟投</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DiskGenisPro数据管理软件</title>
      <link href="/article/2022-2-19_DiskGenisPro/"/>
      <url>/article/2022-2-19_DiskGenisPro/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/DiskGenisPro.png"></p><h1 id="DiskGenius"><a href="#DiskGenius" class="headerlink" title="DiskGenius"></a><a href="https://www.puresys.net/378.html">DiskGenius</a></h1><p>是国产分区软件中非常强大的一款分区工具，拥有磁盘分区管理，分区修复、数据恢复等等功能，DiskGenius提供了免费版本，不过没有数据恢复等功能，大家可以使用DiskGenius专业版，本版是DiskGenius破解版，支持IDE、SCSI、SATA等各种类型的硬盘。支持U盘、USB硬盘、存储卡(闪存卡)。支持FAT12&#x2F;FAT16&#x2F;FAT32&#x2F;NTFS&#x2F;EXT3文件系统。，已经完美激活，推荐大家下载使用。</p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="https://clamowo.lanzouy.com/i6I6beojs4j">下载地址</a></h1><p><a href="https://clamowo.lanzouy.com/b05agns3g">蓝奏云</a></p><p><a href="http://shandianpan.com/f/5rhk">闪电盘</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle（甲骨文）免费云服务器注册指南及故障解决！</title>
      <link href="/article/2021-12-21_oracle/"/>
      <url>/article/2021-12-21_oracle/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/oracle.png"></p><h1 id="所有命令"><a href="#所有命令" class="headerlink" title="所有命令"></a>所有命令</h1><h2 id="切换到-root-用户"><a href="#切换到-root-用户" class="headerlink" title="切换到 root 用户"></a>切换到 root 用户</h2><pre><code class="hljs plaintext">sudo -i</code></pre><h2 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h2><p>CentOS系统执行以下命令：</p><pre><code class="hljs plaintext">yum update -y &amp;&amp; yum update -y &amp;&amp; yum install -y socat</code></pre><p>Debian&#x2F;Ubuntu系统执行以下命令：</p><pre><code class="hljs plaintext">apt update -y &amp;&amp; apt install -y curl &amp;&amp; apt install -y socat</code></pre><h2 id="防火墙相关命令"><a href="#防火墙相关命令" class="headerlink" title="防火墙相关命令"></a>防火墙相关命令</h2><pre><code class="hljs plaintext">firewall-cmd --state                   # 查看防火墙状态systemctl stop firewalld.service       # 停止防火墙systemctl disable firewalld.service    # 禁止防火墙开机自启</code></pre><h2 id="甲骨文-oracle-开启-root-密码-登录"><a href="#甲骨文-oracle-开启-root-密码-登录" class="headerlink" title="甲骨文 ( oracle ) 开启 root + 密码 登录"></a>甲骨文 ( oracle ) 开启 root + 密码 登录</h2><pre><code class="hljs plaintext">sudo -iecho root:V2rayssr |chpasswd rootsed -i &#x27;s/^#\?PermitRootLogin.*/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config;sed -i &#x27;s/^#\?PasswordAuthentication.*/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config;service sshd restart</code></pre><h2 id="BBR2加速"><a href="#BBR2加速" class="headerlink" title="BBR2加速"></a>BBR2加速</h2><pre><code class="hljs plaintext">wget --no-check-certificate -q -O bbr2.sh &quot;https://github.com/yeyingorg/bbr2.sh/raw/master/bbr2.sh&quot; &amp;&amp; chmod +x bbr2.sh &amp;&amp; bash bbr2.sh auto</code></pre><h2 id="安装-升级x-ui面板一键脚本"><a href="#安装-升级x-ui面板一键脚本" class="headerlink" title="安装&amp;升级x-ui面板一键脚本"></a>安装&amp;升级x-ui面板一键脚本</h2><pre><code class="hljs plaintext">bash &lt;(curl -Ls https://raw.githubusercontent.com/vaxilu/x-ui/master/install.sh)</code></pre><h2 id="运行Acme脚本"><a href="#运行Acme脚本" class="headerlink" title="运行Acme脚本"></a>运行Acme脚本</h2><pre><code class="hljs plaintext">curl https://get.acme.sh | sh</code></pre><h2 id="申请证书及密钥"><a href="#申请证书及密钥" class="headerlink" title="申请证书及密钥"></a>申请证书及密钥</h2><p>PS：修改代码中注释的域名，改为你自己的域名</p><pre><code class="hljs plaintext">~/.acme.sh/acme.sh --register-account -m xxxx@gmail.com~/.acme.sh/acme.sh  --issue -d 你的域名   --standalone</code></pre><p>下载证书及密钥</p><pre><code class="hljs plaintext">~/.acme.sh/acme.sh --installcert -d 你的域名 --key-file /root/private.key --fullchain-file /root/cert.crt</code></pre>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FinalShell SSH工具,服务器管理,远程桌面加速软件,支持Windows,macOS,Linux</title>
      <link href="/article/2019-08-26_FinalShellSSH/"/>
      <url>/article/2019-08-26_FinalShellSSH/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/FinalShell.png"></p><p>FinalShell SSH工具,服务器管理,远程桌面加速软件,支持Windows,macOS,Linux,版本2.9.8,更新时间2019.6.19<br>wntr 2017-01-17 11:08  30月前  418704 阅读 0 回复 FinalShell<br>FinalShell是一体化的的服务器,网络管理软件,不仅是ssh客户端,还是功能强大的开发,运维工具,充分满足开发,运维需求.<br>特色功能:<br>免费海外服务器远程桌面加速,ssh加速,双边tcp加速,内网穿透.</p><p>Windows版下载地址:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.exe">http://www.hostbuf.com/downloads/finalshell_install.exe</a></p><p>macOS版下载地址:<br><a href="http://www.hostbuf.com/downloads/finalshell_install.pkg">http://www.hostbuf.com/downloads/finalshell_install.pkg</a></p><p>mac版安装路径<br>&#x2F;Applications&#x2F;FinalShell.app&#x2F;Contents&#x2F;Java&#x2F;<br>配置文件路径<br>&#x2F;Users&#x2F;$USER&#x2F;Library&#x2F;FinalShell&#x2F;</p><p>Linux版安装及教程:<br><a href="http://www.hostbuf.com/t/1059.html">http://www.hostbuf.com/t/1059.html</a></p><p>更新日志:<br><a href="http://www.hostbuf.com/t/989.html%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">http://www.hostbuf.com/t/989.html主要特性</a>:<br>1.多平台支持Windows,Mac OS X,Linux<br>2.多标签,批量服务器管理.<br>3.支持登录Ssh和Windows远程桌面.<br>4.漂亮的平滑字体显示,内置100多个配色方案.<br>5.终端,sftp同屏显示,同步切换目录.<br>6.命令自动提示,智能匹配,输入更快捷,方便.<br>7.sftp支持,通过各种优化技术,加载更快,切换,打开目录无需等待.<br>8.服务器网络,性能实时监控,无需安装服务器插件.<br>9.内置海外服务器加速,加速远程桌面和ssh连接,操作流畅无卡顿.<br>10.双边加速功能,大幅度提高访问服务器速度.<br>11.内存,Cpu性能监控,Ping延迟丢包,Trace路由监控.<br>12.实时硬盘监控.<br>13.进程管理器.<br>14.快捷命令面板,可同时显示数十个命令.<br>15.内置文本编辑器,支持语法高亮,代码折叠,搜索,替换.<br>16.ssh和远程桌面均支持代理服务器.<br>17.打包传输,自动压缩解压.<br>18.支持rz,sz (zmodem)<br>19.多地点ping监控</p><p>更多功能会逐步增加,保持最少每周一次更新的频率,敬请关注.</p><p>界面截图:<br>Shell终端<br><img src="http://www.hostbuf.com/upload/image/20170928/1506605329395082804.png"></p><p>进程管理器<br><img src="http://www.hostbuf.com/upload/image/20170426/1493144242449041493.png"><br>主机检测,Ping监控,Trace实时跟踪<br><img src="http://www.hostbuf.com/upload/image/20170426/1493144485765021287.png"></p><p>高级网络监控,监控每个进程监听的端口,以及网络连接状态</p><p><img src="http://www.hostbuf.com/upload/image/20171118/1511013349812005421.png"><br>双边加速<br><img src="http://www.hostbuf.com/upload/image/20170222/1487738221746093924.png"><br>打包传输,自动压缩解压,适合传输大量文件,文件夹和文本文件.</p><p><img src="http://www.hostbuf.com/upload/image/20170924/1506183003447079520.png"></p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://www.hostbuf.com/">http://www.hostbuf.com/</a></p><h2 id="百度下载链接"><a href="#百度下载链接" class="headerlink" title="百度下载链接"></a>百度下载链接</h2><p><a href="https://pan.baidu.com/s/10Ai33c13mn0vI7w0jfMPCg">https://pan.baidu.com/s/10Ai33c13mn0vI7w0jfMPCg</a></p><h2 id="其他SSH工具"><a href="#其他SSH工具" class="headerlink" title="其他SSH工具"></a>其他SSH工具</h2><p><a href="https://pan.baidu.com/s/1MOrNzFHq6NIqiv4AbdoZyw">Xshell6</a></p><p><a href="https://pan.baidu.com/s/1KCU3o4UdpyYlCG8HTvt-0g">putty</a></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2Ray 轻松搭建和配置V2Ray</title>
      <link href="/article/2019-08-26_v2ray/"/>
      <url>/article/2019-08-26_v2ray/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/V2rayYJAZ.png"></p><h2 id="1-服务器端的安装，配置。"><a href="#1-服务器端的安装，配置。" class="headerlink" title="1. 服务器端的安装，配置。"></a>1. 服务器端的安装，配置。</h2><p>系统要求</p><ul><li>Debian 7</li><li>Debian 8（推荐）</li><li>Ubuntu 14</li><li>Ubuntu 16</li><li>CentOS 7<br>其他Linux版本不建议</li></ul><p>官方安装脚本自行搜索(较麻烦，所以我直接删除了)</p><p>VIM 快捷键使用：</p><p>输入i 进入编辑模式，修改完毕，Esc键退出编辑模式，输入:w保存文件，输入:q退出vim编辑。</p><h2 id="推荐的一键安装脚本："><a href="#推荐的一键安装脚本：" class="headerlink" title="推荐的一键安装脚本："></a>推荐的一键安装脚本：</h2><p>root 账号</p><pre><code class="hljs plaintext">sudo -ibash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre><blockquote><p>如果提示 curl: command not found<br>请安装 Curl<br>ubuntu&#x2F;debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -y<br>centos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y</p></blockquote><p>协议很多，可以搜索了解下，也可以直接用默认的。有的需要有域名（websocket tls），有的就不用（tcp，mkcp），如下图所示。<br><img src="https://i.loli.net/2019/08/26/z4XcZPe2nN8MmAs.png"></p><p>基本上按照提示一步步选择，回车就可以搞定了。</p><h2 id="快速管理命令："><a href="#快速管理命令：" class="headerlink" title="快速管理命令："></a>快速管理命令：</h2><p>v2ray info 查看 V2Ray 配置信息</p><p>v2ray config 修改 V2Ray 配置</p><p>v2ray link 生成 V2Ray 配置文件链接</p><p>v2ray infolink 生成 V2Ray 配置信息链接</p><p>v2ray qr 生成 V2Ray 配置二维码链接</p><p>v2ray ss 修改 Shadowsocks 配置</p><p>v2ray ssinfo 查看 Shadowsocks 配置信息</p><p>v2ray ssqr 生成 Shadowsocks 配置二维码链接</p><p>v2ray status 查看 V2Ray 运行状态</p><p>v2ray start 启动 V2Ray</p><p>v2ray stop 停止 V2Ray</p><p>v2ray restart 重启 V2Ray</p><p>v2ray log 查看 V2Ray 运行日志</p><p>v2ray update 更新 V2Ray</p><p>v2ray update.sh 更新 V2Ray 管理脚本</p><p>v2ray uninstall 卸载 V2Ray</p><h2 id="2-客户端配置"><a href="#2-客户端配置" class="headerlink" title="2. 客户端配置"></a>2. 客户端配置</h2><p>各平台客户端介绍和下载</p><h3 id="V2RayW-Win"><a href="#V2RayW-Win" class="headerlink" title="V2RayW Win"></a>V2RayW Win</h3><p>下载：<a href="https://github.com/Cenmrev/V2RayW">https://github.com/Cenmrev/V2RayW</a></p><h3 id="V2RayN-Win"><a href="#V2RayN-Win" class="headerlink" title="V2RayN Win"></a>V2RayN Win</h3><p>下载：<a href="https://github.com/2dust/v2rayN">https://github.com/2dust/v2rayN</a></p><h3 id="V2RayX-MAC"><a href="#V2RayX-MAC" class="headerlink" title="V2RayX MAC"></a>V2RayX MAC</h3><p>下载：<a href="https://github.com/Cenmrev/V2RayX">https://github.com/Cenmrev/V2RayX</a></p><p>考虑到部分电脑软件只支持http协议，本地监测的端口有socks和http这俩。</p><ul><li>127.0.0.1+10808是socks。</li><li>127.0.0.1+10809是http。</li></ul><p><img src="https://i.loli.net/2019/08/26/texJTshkvzDliMg.png" alt="批注 2019-08-26 164604.png"><br>使用方法：</p><p>手机配置更简单，我用的 v2rayNG 直接扫描生成的二维码就好了。</p><p>一般协议的安装配置到此就结束了，可以直接去使用了。</p><h2 id="3-使用-Cloudflare-中转-V2Ray-WebSocket-的流量"><a href="#3-使用-Cloudflare-中转-V2Ray-WebSocket-的流量" class="headerlink" title="3.使用 Cloudflare 中转 V2Ray WebSocket 的流量"></a>3.使用 Cloudflare 中转 V2Ray WebSocket 的流量</h2><p>首先你得有域名，免费的可以到这里申请<a href="http://www.freenom.com/zh/index.html">http://www.freenom.com/zh/index.html</a></p><p>会更改DNS，设置A记录就好了，很久之前我也写过介绍的文章，这里就不重复了，搜索到处都有。</p><p>安装时传输协议选择 WebSocket (即选择 3 )，V2Ray 端口选择 80，其他就默认。等待安装完成之后生成二维码或者配置参数。</p><p>输入 v2ray status 看看 V2Ray 有没有在运行，如果没有，使用 netstat -lp 看看是什么程序占用了 80 &#x2F; http ，解决占用程序，然后使用 v2ray start 启动 V2Ray。</p><p>在 Cloudflare 注册登录加入域名解析，Crypto 那里设置 SSL 为 Flexible，DNS 那里添加一个 A 记录指向服务器 IP ，Status 那里的图标务必为橙色状态，即是 DNS and HTTP proxy(CDN)。</p><p>V2Ray 配置信息</p><pre><code class="hljs plaintext">地址 (Address) = 域名端口 (Port) = 443用户ID (User ID) = 用户ID额外ID (Alter Id) = 233传输协议 (Network) = ws (WebSocket)伪装类型 (header type) = noneTLS = 打开</code></pre><p>备注：</p><ol><li>以上使用 Cloudflare 中转 V2Ray 的 WebSocket 流量，由于 Cloudflare 实现了 TLS ，所以 V2Ray 配置信息请以上面的内容为准。<br>这种方式比较简单的利用了 Cloudflare 的 TLS，服务器和客户端两端的配置也相对很简单，而且，可以用多个域名来指向一个服务器，那就不怕封了。</li><li>在服务器端也可以实现 TLS。先在 DNS 那里修改之前添加的 IP 记录，将 Status 那里的图标点一下让它变成灰色状态，即是 DNS only. 然后在 Crypto 那里设置 SSL 为 Full。<br>如果当前 V2Ray 端口为 80，输入 v2ray config 回车，选择修改端口即可，修改的端口随便输入，只要不是 80 或者 443 即可。<br>再次输入 v2ray config 回车，选择修改传输协议，选择 WebSocket + TLS ，即是选择 4。按提示输入域名，域名解析 Y ，自动配置 TLS 也是 Y ，后面还会安装 Caddy 按回车继续，等待配置自动完成，生成配置二维码。<br>等配置完成后，Cloudflare 的 DNS，将 Status 那里的图标点一下让它变成橙色状态，即是 DNS and HTTP proxy(CDN)。<br>这样全部实现 TLS 配置就结束了，可以打开客户端试试。这种方式是两端都是 TLS ，但域名只能绑定一个。<br>以上两种方法各有优缺点，我选择的是第一种。</li></ol><h2 id="推荐目前我觉得还算便宜，服务还算可靠的-VPS"><a href="#推荐目前我觉得还算便宜，服务还算可靠的-VPS" class="headerlink" title="推荐目前我觉得还算便宜，服务还算可靠的 VPS"></a>推荐目前我觉得还算便宜，服务还算可靠的 VPS</h2><p>使用下面链接，新用户充值有奖励，谢谢!<br><a href="https://www.vultr.com/?ref=7270890"><img src="https://www.vultr.com/media/banners/banner_800x418.png" width="800" height="418"></a></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> 一键脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之换电脑了怎么办 在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建</title>
      <link href="/article/2018-03-14_Hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/article/2018-03-14_Hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/HEXO.png"></p><h2 id="1、从官网Git下载git，"><a href="#1、从官网Git下载git，" class="headerlink" title="1、从官网Git下载git，"></a>1、从官网Git下载git，</h2><p>在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建：<br>（1）打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “<a href="mailto:&#x79;&#111;&#x75;&#114;&#101;&#109;&#x61;&#105;&#108;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;">&#x79;&#111;&#x75;&#114;&#101;&#109;&#x61;&#105;&#108;&#x40;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;</a>“ 把其中的邮件地址换成自己的邮件地址，然后一路回车<br>（2）最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。<br>（3）登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。<br>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。</p><h2 id="2、下载Node-js，并安装"><a href="#2、下载Node-js，并安装" class="headerlink" title="2、下载Node.js，并安装"></a>2、下载Node.js，并安装</h2><h2 id="3、打开git-bash客户端，输入-npm-install-hexo-cli-g，开始安装hexo"><a href="#3、打开git-bash客户端，输入-npm-install-hexo-cli-g，开始安装hexo" class="headerlink" title="3、打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo"></a>3、打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo</h2><h2 id="4、下面就将原来的文件拷贝到新电脑中，"><a href="#4、下面就将原来的文件拷贝到新电脑中，" class="headerlink" title="4、下面就将原来的文件拷贝到新电脑中，"></a>4、下面就将原来的文件拷贝到新电脑中，</h2><p>但是要注意哪些文件是必须的，哪些文件是可以删除的。<br>（1）讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。总结：_config.yml，theme&#x2F;，source&#x2F;，scaffolds&#x2F;，package.json，.gitignore，是需要拷贝的。<br>（2）再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。总结：.git&#x2F;，node_modules&#x2F;，public&#x2F;，.deploy_git&#x2F;，db.json文件需要删除。</p><h2 id="5、在git-bash中切换目录到新拷贝的文件夹里"><a href="#5、在git-bash中切换目录到新拷贝的文件夹里" class="headerlink" title="5、在git bash中切换目录到新拷贝的文件夹里"></a>5、在git bash中切换目录到新拷贝的文件夹里</h2><p>，使用 npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h2 id="6、安装其他的一些必要组件"><a href="#6、安装其他的一些必要组件" class="headerlink" title="6、安装其他的一些必要组件"></a>6、安装其他的一些必要组件</h2><p>，如果在node_modules里面有的，就不要重复安装了：<br>（1）为了使用hexo d来部署到git上，需要安装<br>npm install hexo-deployer-git –save<br>（2）为了建立RSS订阅，需要安装<br>npm install hexo-generator-feed –save<br>（3）为了建立站点地图，需要安装<br>npm install hexo-generator-sitemap –save<br>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</p><h2 id="7、使用hexo-g，然后使用hexo-d进行部署，如果都没有出错，就转移成功了！"><a href="#7、使用hexo-g，然后使用hexo-d进行部署，如果都没有出错，就转移成功了！" class="headerlink" title="7、使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！"></a>7、使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！</h2><p>作者：skycrown<br>链接：<a href="https://www.zhihu.com/question/21193762/answer/103097754">https://www.zhihu.com/question/21193762/answer/103097754</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片问题 使用markdown写文章，插入图片的格式为图片名称，这里要说的是链接地址怎么写</title>
      <link href="/article/2017-12-15_hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
      <url>/article/2017-12-15_hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><img src="https://wangwenzhi.eu.org/images/images/IMG.png"></p><h2 id="博客图片问题"><a href="#博客图片问题" class="headerlink" title="博客图片问题"></a>博客图片问题</h2><h3 id="使用markdown写文章，插入图片的格式为图片名称，这里要说的是链接地址怎么写。"><a href="#使用markdown写文章，插入图片的格式为图片名称，这里要说的是链接地址怎么写。" class="headerlink" title="使用markdown写文章，插入图片的格式为图片名称，这里要说的是链接地址怎么写。"></a>使用markdown写文章，插入图片的格式为图片名称，这里要说的是链接地址怎么写。</h3><p>对于hexo，有两种方式： </p><ol><li><p>使用本地路径：在hexo&#x2F;source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为&#x2F;img&#x2F;图片名称。 </p></li><li><p>使用图床，地址 <a href="http://upload.otar.im/">http://upload.otar.im/</a> 将图片拖入区域中，会生成图片的URL，这就是链接地址。</p></li><li><p>使用七牛云 <a href="https://portal.qiniu.com/">https://portal.qiniu.com</a></p></li></ol><p><img src="https://i.loli.net/2017/12/15/5a335143a4889.jpg" alt="wallhaven-599800.jpg"></p><h3 id="更多图床网站"><a href="#更多图床网站" class="headerlink" title="更多图床网站"></a>更多图床网站</h3><ul><li><a href="https://sm.ms/">https://sm.ms/</a></li><li><a href="https://tu.aixinxi.net/index.php">https://tu.aixinxi.net/index.php</a></li><li><a href="https://simimg.com/wangwenzhi">https://simimg.com/wangwenzhi</a></li><li><a href="https://www.picb.cc/">https://www.picb.cc/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> BLog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
